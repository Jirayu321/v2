{"ast":null,"code":"import * as React from 'react';\nimport { useState, useCallback, useMemo, useContext } from 'react';\nimport { MapContext } from './map';\nexport const MountedMapsContext = React.createContext(null);\nexport const MapProvider = props => {\n  const [maps, setMaps] = useState({});\n  const onMapMount = useCallback(function (map) {\n    let id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';\n    setMaps(currMaps => {\n      if (id === 'current') {\n        throw new Error(\"'current' cannot be used as map id\");\n      }\n\n      if (currMaps[id]) {\n        throw new Error(`Multiple maps with the same id: ${id}`);\n      }\n\n      return { ...currMaps,\n        [id]: map\n      };\n    });\n  }, []);\n  const onMapUnmount = useCallback(function () {\n    let id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';\n    setMaps(currMaps => {\n      if (currMaps[id]) {\n        const nextMaps = { ...currMaps\n        };\n        delete nextMaps[id];\n        return nextMaps;\n      }\n\n      return currMaps;\n    });\n  }, []);\n  return React.createElement(MountedMapsContext.Provider, {\n    value: {\n      maps,\n      onMapMount,\n      onMapUnmount\n    }\n  }, props.children);\n};\nexport function useMap() {\n  var _a;\n\n  const maps = (_a = useContext(MountedMapsContext)) === null || _a === void 0 ? void 0 : _a.maps;\n  const currentMap = useContext(MapContext);\n  const mapsWithCurrent = useMemo(() => {\n    return { ...maps,\n      current: currentMap === null || currentMap === void 0 ? void 0 : currentMap.map\n    };\n  }, [maps, currentMap]);\n  return mapsWithCurrent;\n}","map":{"version":3,"sources":["../../../src/components/use-map.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAQ,QAAR,EAAkB,WAAlB,EAA+B,OAA/B,EAAwC,UAAxC,QAAyD,OAAzD;AAGA,SAAQ,UAAR,QAAyB,OAAzB;AAQA,OAAO,MAAM,kBAAkB,GAAG,KAAK,CAAC,aAAN,CAA6C,IAA7C,CAA3B;AAEP,OAAO,MAAM,WAAW,GAA2C,KAAK,IAAG;EACzE,MAAM,CAAC,IAAD,EAAO,OAAP,IAAkB,QAAQ,CAAyB,EAAzB,CAAhC;EAEA,MAAM,UAAU,GAAG,WAAW,CAAC,UAAC,GAAD,EAAwC;IAAA,IAA1B,EAA0B,uEAAb,SAAa;IACrE,OAAO,CAAC,QAAQ,IAAG;MACjB,IAAI,EAAE,KAAK,SAAX,EAAsB;QACpB,MAAM,IAAI,KAAJ,CAAU,oCAAV,CAAN;MACD;;MACD,IAAI,QAAQ,CAAC,EAAD,CAAZ,EAAkB;QAChB,MAAM,IAAI,KAAJ,CAAU,mCAAmC,EAAE,EAA/C,CAAN;MACD;;MACD,OAAO,EAAC,GAAG,QAAJ;QAAc,CAAC,EAAD,GAAM;MAApB,CAAP;IACD,CARM,CAAP;EASD,CAV6B,EAU3B,EAV2B,CAA9B;EAYA,MAAM,YAAY,GAAG,WAAW,CAAC,YAA2B;IAAA,IAA1B,EAA0B,uEAAb,SAAa;IAC1D,OAAO,CAAC,QAAQ,IAAG;MACjB,IAAI,QAAQ,CAAC,EAAD,CAAZ,EAAkB;QAChB,MAAM,QAAQ,GAAG,EAAC,GAAG;QAAJ,CAAjB;QACA,OAAO,QAAQ,CAAC,EAAD,CAAf;QACA,OAAO,QAAP;MACD;;MACD,OAAO,QAAP;IACD,CAPM,CAAP;EAQD,CAT+B,EAS7B,EAT6B,CAAhC;EAWA,OACE,KAAA,CAAA,aAAA,CAAC,kBAAkB,CAAC,QAApB,EAA4B;IAC1B,KAAK,EAAE;MACL,IADK;MAEL,UAFK;MAGL;IAHK;EADmB,CAA5B,EAOG,KAAK,CAAC,QAPT,CADF;AAWD,CArCM;AAuCP,OAAM,SAAU,MAAV,GAAgB;;;EACpB,MAAM,IAAI,GAAG,CAAA,EAAA,GAAA,UAAU,CAAC,kBAAD,CAAV,MAA8B,IAA9B,IAA8B,EAAA,KAAA,KAAA,CAA9B,GAA8B,KAAA,CAA9B,GAA8B,EAAA,CAAE,IAA7C;EACA,MAAM,UAAU,GAAG,UAAU,CAAC,UAAD,CAA7B;EAEA,MAAM,eAAe,GAAG,OAAO,CAAC,MAAK;IACnC,OAAO,EAAC,GAAG,IAAJ;MAAU,OAAO,EAAE,UAAU,KAAA,IAAV,IAAA,UAAU,KAAA,KAAA,CAAV,GAAU,KAAA,CAAV,GAAA,UAAU,CAAE;IAA/B,CAAP;EACD,CAF8B,EAE5B,CAAC,IAAD,EAAO,UAAP,CAF4B,CAA/B;EAIA,OAAO,eAAP;AACD","sourceRoot":"","sourcesContent":["import * as React from 'react';\nimport { useState, useCallback, useMemo, useContext } from 'react';\nimport { MapContext } from './map';\nexport const MountedMapsContext = React.createContext(null);\nexport const MapProvider = props => {\n    const [maps, setMaps] = useState({});\n    const onMapMount = useCallback((map, id = 'default') => {\n        setMaps(currMaps => {\n            if (id === 'current') {\n                throw new Error(\"'current' cannot be used as map id\");\n            }\n            if (currMaps[id]) {\n                throw new Error(`Multiple maps with the same id: ${id}`);\n            }\n            return { ...currMaps, [id]: map };\n        });\n    }, []);\n    const onMapUnmount = useCallback((id = 'default') => {\n        setMaps(currMaps => {\n            if (currMaps[id]) {\n                const nextMaps = { ...currMaps };\n                delete nextMaps[id];\n                return nextMaps;\n            }\n            return currMaps;\n        });\n    }, []);\n    return (React.createElement(MountedMapsContext.Provider, { value: {\n            maps,\n            onMapMount,\n            onMapUnmount\n        } }, props.children));\n};\nexport function useMap() {\n    var _a;\n    const maps = (_a = useContext(MountedMapsContext)) === null || _a === void 0 ? void 0 : _a.maps;\n    const currentMap = useContext(MapContext);\n    const mapsWithCurrent = useMemo(() => {\n        return { ...maps, current: currentMap === null || currentMap === void 0 ? void 0 : currentMap.map };\n    }, [maps, currentMap]);\n    return mapsWithCurrent;\n}\n//# sourceMappingURL=use-map.js.map"]},"metadata":{},"sourceType":"module"}