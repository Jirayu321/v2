{"ast":null,"code":"/*\r\n * wysiwyg web editor\r\n *\r\n * suneditor.js\r\n * Copyright 2017 JiHong Lee.\r\n * MIT license.\r\n */\n'use strict';\n/**\r\n * @description utility function\r\n */\n\nconst util = {\n  _d: null,\n  _w: null,\n  isIE: null,\n  isIE_Edge: null,\n  isOSX_IOS: null,\n  isChromium: null,\n  _propertiesInit: function () {\n    if (this._d) return;\n    this._d = document;\n    this._w = window;\n    this.isIE = navigator.userAgent.indexOf('Trident') > -1;\n    this.isIE_Edge = navigator.userAgent.indexOf('Trident') > -1 || navigator.appVersion.indexOf('Edge') > -1;\n    this.isOSX_IOS = /(Mac|iPhone|iPod|iPad)/.test(navigator.platform);\n    this.isChromium = !!window.chrome;\n  },\n  _allowedEmptyNodeList: '.se-component, pre, blockquote, hr, li, table, img, iframe, video, audio, canvas',\n\n  /**\r\n   * @description HTML Reserved Word Converter.\r\n   * @param {String} contents \r\n   * @returns {String} HTML string\r\n   * @private\r\n   */\n  _HTMLConvertor: function (contents) {\n    const ec = {\n      '&': '&amp;',\n      '\\u00A0': '&nbsp;',\n      '\\'': '&apos;',\n      '\"': '&quot;',\n      '<': '&lt;',\n      '>': '&gt;'\n    };\n    return contents.replace(/&|\\u00A0|'|\"|<|>/g, function (m) {\n      return typeof ec[m] === 'string' ? ec[m] : m;\n    });\n  },\n\n  /**\r\n   * @description Unicode Character 'ZERO WIDTH SPACE' (\\u200B)\r\n   */\n  zeroWidthSpace: String.fromCharCode(8203),\n\n  /**\r\n   * @description Regular expression to find 'zero width space' (/\\u200B/g)\r\n   */\n  zeroWidthRegExp: new RegExp(String.fromCharCode(8203), 'g'),\n\n  /**\r\n   * @description Regular expression to find only 'zero width space' (/^\\u200B+$/)\r\n   */\n  onlyZeroWidthRegExp: new RegExp('^' + String.fromCharCode(8203) + '+$'),\n\n  /**\r\n   * @description A method that checks If the text is blank or to see if it contains 'ZERO WIDTH SPACE' or empty (util.zeroWidthSpace)\r\n   * @param {String|Node} text String value or Node\r\n   * @returns {Boolean}\r\n   */\n  onlyZeroWidthSpace: function (text) {\n    if (text === null || text === undefined) return false;\n    if (typeof text !== 'string') text = text.textContent;\n    return text === '' || this.onlyZeroWidthRegExp.test(text);\n  },\n\n  /**\r\n   * @description Gets XMLHttpRequest object\r\n   * @returns {XMLHttpRequest|ActiveXObject}\r\n   */\n  getXMLHttpRequest: function () {\n    /** IE */\n    if (this._w.ActiveXObject) {\n      try {\n        return new ActiveXObject('Msxml2.XMLHTTP');\n      } catch (e) {\n        try {\n          return new ActiveXObject('Microsoft.XMLHTTP');\n        } catch (e1) {\n          return null;\n        }\n      }\n    }\n    /** netscape */\n    else if (this._w.XMLHttpRequest) {\n      return new XMLHttpRequest();\n    }\n    /** fail */\n    else {\n      return null;\n    }\n  },\n\n  /**\r\n   * @description Object.values\r\n   * @param {Object|null} obj Object parameter.\r\n   * @returns {Array}\r\n   */\n  getValues: function (obj) {\n    return !obj ? [] : this._w.Object.keys(obj).map(function (i) {\n      return obj[i];\n    });\n  },\n\n  /**\r\n   * @description Convert the CamelCase To the KebabCase.\r\n   * @param {String|Array} param [Camel string]\r\n   * @returns {String|Array}\r\n   */\n  camelToKebabCase: function (param) {\n    if (typeof param === 'string') {\n      return param.replace(/[A-Z]/g, function (letter) {\n        return \"-\" + letter.toLowerCase();\n      });\n    } else {\n      return param.map(function (str) {\n        return util.camelToKebabCase(str);\n      });\n    }\n  },\n\n  /**\r\n   * @description Convert the KebabCase To the CamelCase.\r\n   * @param {String|Array} param [KebabCase string]\r\n   * @returns {String|Array}\r\n   */\n  kebabToCamelCase: function (param) {\n    if (typeof param === 'string') {\n      return param.replace(/-[a-zA-Z]/g, function (letter) {\n        return letter.replace('-', '').toUpperCase();\n      });\n    } else {\n      return param.map(function (str) {\n        return util.camelToKebabCase(str);\n      });\n    }\n  },\n\n  /**\r\n   * @description Create Element node\r\n   * @param {String} elementName Element name\r\n   * @returns {Element}\r\n   */\n  createElement: function (elementName) {\n    return this._d.createElement(elementName);\n  },\n\n  /**\r\n   * @description Create text node\r\n   * @param {String} text text contents\r\n   * @returns {Node}\r\n   */\n  createTextNode: function (text) {\n    return this._d.createTextNode(text || '');\n  },\n\n  /**\r\n   * @description The editor checks tags by string.\r\n   * If there is \"<\" or \">\" in the attribute of tag, HTML is broken when checking the tag.\r\n   * When using an attribute with \"<\" or \">\", use \"HTMLEncoder\" to save. (ex: math(katex))\r\n   * @param {String} contents HTML or Text string\r\n   * @returns {String}\r\n   */\n  HTMLEncoder: function (contents) {\n    const ec = {\n      '<': '$lt;',\n      '>': '$gt;'\n    };\n    return contents.replace(/<|>/g, function (m) {\n      return typeof ec[m] === 'string' ? ec[m] : m;\n    });\n  },\n\n  /**\r\n   * @description The editor checks tags by string.\r\n   * If there is \"<\" or \">\" in the attribute of tag, HTML is broken when checking the tag.\r\n   * Decoder of data stored as \"HTMLEncoder\" (ex: math(katex))\r\n   * @param {String} contents HTML or Text string\r\n   * @returns {String}\r\n   */\n  HTMLDecoder: function (contents) {\n    const ec = {\n      '$lt;': '<',\n      '$gt;': '>'\n    };\n    return contents.replace(/\\$lt;|\\$gt;/g, function (m) {\n      return typeof ec[m] === 'string' ? ec[m] : m;\n    });\n  },\n\n  /**\r\n   * @description This method run Object.prototype.hasOwnProperty.call(obj, key)\r\n   * @param {Object} obj Object\r\n   * @param {String} key obj.key\r\n   * @returns {Boolean}\r\n   */\n  hasOwn: function (obj, key) {\n    return this._hasOwn.call(obj, key);\n  },\n  _hasOwn: Object.prototype.hasOwnProperty,\n\n  /**\r\n   * @deprecated\r\n   * @description Get the the tag path of the arguments value\r\n   * If not found, return the first found value\r\n   * @param {Array} nameArray File name array\r\n   * @param {String} extension js, css\r\n   * @returns {String}\r\n   */\n  getIncludePath: function (nameArray, extension) {\n    let path = '';\n    const pathList = [];\n    const tagName = extension === 'js' ? 'script' : 'link';\n    const src = extension === 'js' ? 'src' : 'href';\n    let fileName = '(?:';\n\n    for (let i = 0, len = nameArray.length; i < len; i++) {\n      fileName += nameArray[i] + (i < len - 1 ? '|' : ')');\n    }\n\n    const regExp = new this._w.RegExp('(^|.*[\\\\/])' + fileName + '(\\\\.[^\\\\/]+)?\\.' + extension + '(?:\\\\?.*|;.*)?$', 'i');\n    const extRegExp = new this._w.RegExp('.+\\\\.' + extension + '(?:\\\\?.*|;.*)?$', 'i');\n\n    for (let c = this._d.getElementsByTagName(tagName), i = 0; i < c.length; i++) {\n      if (extRegExp.test(c[i][src])) {\n        pathList.push(c[i]);\n      }\n    }\n\n    for (let i = 0; i < pathList.length; i++) {\n      let editorTag = pathList[i][src].match(regExp);\n\n      if (editorTag) {\n        path = editorTag[0];\n        break;\n      }\n    }\n\n    if (path === '') path = pathList.length > 0 ? pathList[0][src] : '';\n    -1 === path.indexOf(':/') && '//' !== path.slice(0, 2) && (path = 0 === path.indexOf('/') ? location.href.match(/^.*?:\\/\\/[^\\/]*/)[0] + path : location.href.match(/^[^\\?]*\\/(?:)/)[0] + path);\n    if (!path) throw '[SUNEDITOR.util.getIncludePath.fail] The SUNEDITOR installation path could not be automatically detected. (name: +' + name + ', extension: ' + extension + ')';\n    return path;\n  },\n\n  /**\r\n   * @deprecated\r\n   * @description Returns the CSS text that has been applied to the current page.\r\n   * @param {Document|null} doc To get the CSS text of an document(core._wd). If null get the current document.\r\n   * @returns {String} Styles string\r\n   */\n  getPageStyle: function (doc) {\n    let cssText = '';\n    const sheets = (doc || this._d).styleSheets;\n\n    for (let i = 0, len = sheets.length, rules; i < len; i++) {\n      try {\n        rules = sheets[i].cssRules;\n      } catch (e) {\n        continue;\n      }\n\n      if (rules) {\n        for (let c = 0, cLen = rules.length; c < cLen; c++) {\n          cssText += rules[c].cssText;\n        }\n      }\n    }\n\n    return cssText;\n  },\n\n  /**\r\n   * @description Get the argument iframe's document object\r\n   * @param {Element} iframe Iframe element (context.element.wysiwygFrame)\r\n   * @returns {Document}\r\n   */\n  getIframeDocument: function (iframe) {\n    let wDocument = iframe.contentWindow || iframe.contentDocument;\n    if (wDocument.document) wDocument = wDocument.document;\n    return wDocument;\n  },\n\n  /**\r\n   * @description Get attributes of argument element to string ('class=\"---\" name=\"---\" ')\r\n   * @param {Element} element Element object\r\n   * @param {Array|null} exceptAttrs Array of attribute names to exclude from the result\r\n   * @returns {String}\r\n   */\n  getAttributesToString: function (element, exceptAttrs) {\n    if (!element.attributes) return '';\n    const attrs = element.attributes;\n    let attrString = '';\n\n    for (let i = 0, len = attrs.length; i < len; i++) {\n      if (exceptAttrs && exceptAttrs.indexOf(attrs[i].name) > -1) continue;\n      attrString += attrs[i].name + '=\"' + attrs[i].value + '\" ';\n    }\n\n    return attrString;\n  },\n\n  /**\r\n   * @descriptionGets Get the length in bytes of a string.\r\n   * referencing code: \"https://github.com/shaan1974/myrdin/blob/master/expressions/string.js#L11\"\r\n   * @param {String} text String text\r\n   * @returns {Number}\r\n   */\n  getByteLength: function (text) {\n    if (!text || !text.toString) return 0;\n    text = text.toString();\n    const encoder = this._w.encodeURIComponent;\n    let cr, cl;\n\n    if (this.isIE_Edge) {\n      cl = this._w.unescape(encoder(text)).length;\n      cr = 0;\n\n      if (encoder(text).match(/(%0A|%0D)/gi) !== null) {\n        cr = encoder(text).match(/(%0A|%0D)/gi).length;\n      }\n\n      return cl + cr;\n    } else {\n      cl = new this._w.TextEncoder('utf-8').encode(text).length;\n      cr = 0;\n\n      if (encoder(text).match(/(%0A|%0D)/gi) !== null) {\n        cr = encoder(text).match(/(%0A|%0D)/gi).length;\n      }\n\n      return cl + cr;\n    }\n  },\n\n  /**\r\n   * @description It is judged whether it is the edit region top div element or iframe's body tag.\r\n   * @param {Node} element The node to check\r\n   * @returns {Boolean}\r\n   */\n  isWysiwygDiv: function (element) {\n    return element && element.nodeType === 1 && (this.hasClass(element, 'se-wrapper-wysiwyg') || /^BODY$/i.test(element.nodeName));\n  },\n\n  /**\r\n   * @description It is judged whether it is the contenteditable property is false.\r\n   * @param {Node} element The node to check\r\n   * @returns {Boolean}\r\n   */\n  isNonEditable: function (element) {\n    return element && element.nodeType === 1 && element.getAttribute('contenteditable') === 'false';\n  },\n\n  /**\r\n   * @description It is judged whether it is a node related to the text style.\r\n   * (strong|span|font|b|var|i|em|u|ins|s|strike|del|sub|sup|mark|a|label|code)\r\n   * @param {Node} element The node to check\r\n   * @returns {Boolean}\r\n   */\n  isTextStyleElement: function (element) {\n    return element && element.nodeType !== 3 && /^(strong|span|font|b|var|i|em|u|ins|s|strike|del|sub|sup|mark|a|label|code|summary)$/i.test(element.nodeName);\n  },\n\n  /**\r\n   * @description It is judged whether it is the format element (P, DIV, H[1-6], PRE, LI | class=\"__se__format__replace_xxx\")\r\n   * Format element also contain \"free format Element\"\r\n   * @param {Node} element The node to check\r\n   * @returns {Boolean}\r\n   */\n  isFormatElement: function (element) {\n    return element && element.nodeType === 1 && (/^(P|DIV|H[1-6]|PRE|LI|TH|TD|DETAILS)$/i.test(element.nodeName) || this.hasClass(element, '(\\\\s|^)__se__format__replace_.+(\\\\s|$)|(\\\\s|^)__se__format__free_.+(\\\\s|$)')) && !this.isComponent(element) && !this.isWysiwygDiv(element);\n  },\n\n  /**\r\n   * @description It is judged whether it is the range format element. (BLOCKQUOTE, OL, UL, FIGCAPTION, TABLE, THEAD, TBODY, TR, TH, TD | class=\"__se__format__range_xxx\")\r\n   * Range format element is wrap the \"format element\" and \"component\"\r\n   * @param {Node} element The node to check\r\n   * @returns {Boolean}\r\n   */\n  isRangeFormatElement: function (element) {\n    return element && element.nodeType === 1 && (/^(BLOCKQUOTE|OL|UL|FIGCAPTION|TABLE|THEAD|TBODY|TR|TH|TD|DETAILS)$/i.test(element.nodeName) || this.hasClass(element, '(\\\\s|^)__se__format__range_.+(\\\\s|$)'));\n  },\n\n  /**\r\n   * @description It is judged whether it is the closure range format element. (TH, TD | class=\"__se__format__range__closure_xxx\")\r\n   * Closure range format elements is included in the range format element.\r\n   *  - Closure range format element is wrap the \"format element\" and \"component\"\r\n   * ※ You cannot exit this format with the Enter key or Backspace key.\r\n   * ※ Use it only in special cases. ([ex] format of table cells)\r\n   * @param {Node} element The node to check\r\n   * @returns {Boolean}\r\n   */\n  isClosureRangeFormatElement: function (element) {\n    return element && element.nodeType === 1 && (/^(TH|TD)$/i.test(element.nodeName) || this.hasClass(element, '(\\\\s|^)__se__format__range__closure_.+(\\\\s|$)'));\n  },\n\n  /**\r\n   * @description It is judged whether it is the free format element. (PRE | class=\"__se__format__free_xxx\")\r\n   * Free format elements is included in the format element.\r\n   * Free format elements's line break is \"BR\" tag.\r\n   * ※ Entering the Enter key in the space on the last line ends \"Free Format\" and appends \"Format\".\r\n   * @param {Node} element The node to check\r\n   * @returns {Boolean}\r\n   */\n  isFreeFormatElement: function (element) {\n    return element && element.nodeType === 1 && (/^PRE$/i.test(element.nodeName) || this.hasClass(element, '(\\\\s|^)__se__format__free_.+(\\\\s|$)')) && !this.isComponent(element) && !this.isWysiwygDiv(element);\n  },\n\n  /**\r\n   * @description It is judged whether it is the closure free format element. (class=\"__se__format__free__closure_xxx\")\r\n   * Closure free format elements is included in the free format element.\r\n   *  - Closure free format elements's line break is \"BR\" tag.\r\n   * ※ You cannot exit this format with the Enter key or Backspace key.\r\n   * ※ Use it only in special cases. ([ex] format of table cells)\r\n   * @param {Node} element The node to check\r\n   * @returns {Boolean}\r\n   */\n  isClosureFreeFormatElement: function (element) {\n    return element && element.nodeType === 1 && this.hasClass(element, '(\\\\s|^)__se__format__free__closure_.+(\\\\s|$)');\n  },\n\n  /**\r\n   * @description It is judged whether it is the component[img, iframe, video, audio, table] cover(class=\"se-component\") and table, hr\r\n   * @param {Node} element The node to check\r\n   * @returns {Boolean}\r\n   */\n  isComponent: function (element) {\n    return element && (/se-component/.test(element.className) || /^(TABLE|HR)$/.test(element.nodeName));\n  },\n\n  /**\r\n   * @description Checks for \"__se__uneditable\" in the class list.\r\n   * Components with class \"__se__uneditable\" cannot be modified.\r\n   * @param {Element} element The element to check\r\n   * @returns {Boolean}\r\n   */\n  isUneditableComponent: function (element) {\n    return element && this.hasClass(element, '__se__uneditable');\n  },\n\n  /**\r\n   * @description It is judged whether it is the component [img, iframe] cover(class=\"se-component\")\r\n   * @param {Node} element The node to check\r\n   * @returns {Boolean}\r\n   */\n  isMediaComponent: function (element) {\n    return element && /se-component/.test(element.className);\n  },\n\n  /**\r\n   * @description It is judged whether it is the not checking node. (class=\"katex\", \"__se__tag\")\r\n   * @param {Node} element The node to check\r\n   * @returns {Boolean}\r\n   */\n  isNotCheckingNode: function (element) {\n    return element && /katex|__se__tag/.test(element.className);\n  },\n\n  /**\r\n   * @description If a parent node that contains an argument node finds a format node (util.isFormatElement), it returns that node.\r\n   * @param {Node} element Reference node.\r\n   * @param {Function|null} validation Additional validation function.\r\n   * @returns {Element|null}\r\n   */\n  getFormatElement: function (element, validation) {\n    if (!element) return null;\n\n    if (!validation) {\n      validation = function () {\n        return true;\n      };\n    }\n\n    while (element) {\n      if (this.isWysiwygDiv(element)) return null;\n      if (this.isRangeFormatElement(element)) element.firstElementChild;\n      if (this.isFormatElement(element) && validation(element)) return element;\n      element = element.parentNode;\n    }\n\n    return null;\n  },\n\n  /**\r\n   * @description If a parent node that contains an argument node finds a format node (util.isRangeFormatElement), it returns that node.\r\n   * @param {Node} element Reference node.\r\n   * @param {Function|null} validation Additional validation function.\r\n   * @returns {Element|null}\r\n   */\n  getRangeFormatElement: function (element, validation) {\n    if (!element) return null;\n\n    if (!validation) {\n      validation = function () {\n        return true;\n      };\n    }\n\n    while (element) {\n      if (this.isWysiwygDiv(element)) return null;\n      if (this.isRangeFormatElement(element) && !/^(THEAD|TBODY|TR)$/i.test(element.nodeName) && validation(element)) return element;\n      element = element.parentNode;\n    }\n\n    return null;\n  },\n\n  /**\r\n   * @description If a parent node that contains an argument node finds a free format node (util.isFreeFormatElement), it returns that node.\r\n   * @param {Node} element Reference node.\r\n   * @param {Function|null} validation Additional validation function.\r\n   * @returns {Element|null}\r\n   */\n  getFreeFormatElement: function (element, validation) {\n    if (!element) return null;\n\n    if (!validation) {\n      validation = function () {\n        return true;\n      };\n    }\n\n    while (element) {\n      if (this.isWysiwygDiv(element)) return null;\n      if (this.isFreeFormatElement(element) && validation(element)) return element;\n      element = element.parentNode;\n    }\n\n    return null;\n  },\n\n  /**\r\n   * @description If a parent node that contains an argument node finds a closure free format node (util.isClosureFreeFormatElement), it returns that node.\r\n   * @param {Node} element Reference node.\r\n   * @param {Function|null} validation Additional validation function.\r\n   * @returns {Element|null}\r\n   */\n  getClosureFreeFormatElement: function (element, validation) {\n    if (!element) return null;\n\n    if (!validation) {\n      validation = function () {\n        return true;\n      };\n    }\n\n    while (element) {\n      if (this.isWysiwygDiv(element)) return null;\n      if (this.isClosureFreeFormatElement(element) && validation(element)) return element;\n      element = element.parentNode;\n    }\n\n    return null;\n  },\n\n  /**\r\n   * @description Add style and className of copyEl to originEl\r\n   * @param {Element} originEl Origin element\r\n   * @param {Element} copyEl Element to copy\r\n   */\n  copyTagAttributes: function (originEl, copyEl) {\n    if (copyEl.style.cssText) {\n      originEl.style.cssText += copyEl.style.cssText;\n    }\n\n    const classes = copyEl.classList;\n\n    for (let i = 0, len = classes.length; i < len; i++) {\n      this.addClass(originEl, classes[i]);\n    }\n\n    if (!originEl.style.cssText) originEl.removeAttribute('style');\n    if (!originEl.className.trim()) originEl.removeAttribute('class');\n  },\n\n  /**\r\n   * @description Copy and apply attributes of format tag that should be maintained. (style, class) Ignore \"__se__format__\" class\r\n   * @param {Element} originEl Origin element\r\n   * @param {Element} copyEl Element to copy\r\n   */\n  copyFormatAttributes: function (originEl, copyEl) {\n    copyEl = copyEl.cloneNode(false);\n    copyEl.className = copyEl.className.replace(/(\\s|^)__se__format__[^\\s]+/g, '');\n    this.copyTagAttributes(originEl, copyEl);\n  },\n\n  /**\r\n   * @description Get the item from the array that matches the condition.\r\n   * @param {Array|HTMLCollection|NodeList} array Array to get item\r\n   * @param {Function|null} validation Conditional function\r\n   * @param {Boolean} multi If true, returns all items that meet the criteria otherwise, returns an empty array.\r\n   * If false, returns only one item that meet the criteria otherwise return null.\r\n   * @returns {Array|Node|null}\r\n   */\n  getArrayItem: function (array, validation, multi) {\n    if (!array || array.length === 0) return null;\n\n    validation = validation || function () {\n      return true;\n    };\n\n    const arr = [];\n\n    for (let i = 0, len = array.length, a; i < len; i++) {\n      a = array[i];\n\n      if (validation(a)) {\n        if (!multi) return a;else arr.push(a);\n      }\n    }\n\n    return !multi ? null : arr;\n  },\n\n  /**\r\n   * @description Check if an array contains an element \r\n   * @param {Array|HTMLCollection|NodeList} array element array\r\n   * @param {Node} element The element to check for\r\n   * @returns {Boolean}\r\n   */\n  arrayIncludes: function (array, element) {\n    for (let i = 0; i < array.length; i++) {\n      if (array[i] === element) {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\r\n   * @description Get the index of the argument value in the element array\r\n   * @param {Array|HTMLCollection|NodeList} array element array\r\n   * @param {Node} element The element to find index\r\n   * @returns {Number}\r\n   */\n  getArrayIndex: function (array, element) {\n    let idx = -1;\n\n    for (let i = 0, len = array.length; i < len; i++) {\n      if (array[i] === element) {\n        idx = i;\n        break;\n      }\n    }\n\n    return idx;\n  },\n\n  /**\r\n   * @description Get the next index of the argument value in the element array\r\n   * @param {Array|HTMLCollection|NodeList} array element array\r\n   * @param {Node} item The element to find index\r\n   * @returns {Number}\r\n   */\n  nextIdx: function (array, item) {\n    let idx = this.getArrayIndex(array, item);\n    if (idx === -1) return -1;\n    return idx + 1;\n  },\n\n  /**\r\n   * @description Get the previous index of the argument value in the element array\r\n   * @param {Array|HTMLCollection|NodeList} array Element array\r\n   * @param {Node} item The element to find index\r\n   * @returns {Number}\r\n   */\n  prevIdx: function (array, item) {\n    let idx = this.getArrayIndex(array, item);\n    if (idx === -1) return -1;\n    return idx - 1;\n  },\n\n  /**\r\n   * @description Returns the index compared to other sibling nodes.\r\n   * @param {Node} node The Node to find index\r\n   * @returns {Number}\r\n   */\n  getPositionIndex: function (node) {\n    let idx = 0;\n\n    while (node = node.previousSibling) {\n      idx += 1;\n    }\n\n    return idx;\n  },\n\n  /**\r\n   * @description Returns the position of the \"node\" in the \"parentNode\" in a numerical array.\r\n   * ex) <p><span>aa</span><span>bb</span></p> : getNodePath(node: \"bb\", parentNode: \"<P>\") -> [1, 0]\r\n   * @param {Node} node The Node to find position path\r\n   * @param {Node|null} parentNode Parent node. If null, wysiwyg div area\r\n   * @param {Object|null} _newOffsets If you send an object of the form \"{s: 0, e: 0}\", the text nodes that are attached together are merged into one, centered on the \"node\" argument.\r\n   * \"_newOffsets.s\" stores the length of the combined characters after \"node\" and \"_newOffsets.e\" stores the length of the combined characters before \"node\".\r\n   * Do not use unless absolutely necessary.\r\n   * @returns {Array}\r\n   */\n  getNodePath: function (node, parentNode, _newOffsets) {\n    const path = [];\n    let finds = true;\n    this.getParentElement(node, function (el) {\n      if (el === parentNode) finds = false;\n\n      if (finds && !this.isWysiwygDiv(el)) {\n        // merge text nodes\n        if (_newOffsets && el.nodeType === 3) {\n          let temp = null,\n              tempText = null;\n          _newOffsets.s = _newOffsets.e = 0;\n          let previous = el.previousSibling;\n\n          while (previous && previous.nodeType === 3) {\n            tempText = previous.textContent.replace(this.zeroWidthRegExp, '');\n            _newOffsets.s += tempText.length;\n            el.textContent = tempText + el.textContent;\n            temp = previous;\n            previous = previous.previousSibling;\n            this.removeItem(temp);\n          }\n\n          let next = el.nextSibling;\n\n          while (next && next.nodeType === 3) {\n            tempText = next.textContent.replace(this.zeroWidthRegExp, '');\n            _newOffsets.e += tempText.length;\n            el.textContent += tempText;\n            temp = next;\n            next = next.nextSibling;\n            this.removeItem(temp);\n          }\n        } // index push\n\n\n        path.push(el);\n      }\n\n      return false;\n    }.bind(this));\n    return path.map(this.getPositionIndex).reverse();\n  },\n\n  /**\r\n   * @description Returns the node in the location of the path array obtained from \"util.getNodePath\".\r\n   * @param {Array} offsets Position array, array obtained from \"util.getNodePath\"\r\n   * @param {Node} parentNode Base parent element\r\n   * @returns {Node}\r\n   */\n  getNodeFromPath: function (offsets, parentNode) {\n    let current = parentNode;\n    let nodes;\n\n    for (let i = 0, len = offsets.length; i < len; i++) {\n      nodes = current.childNodes;\n      if (nodes.length === 0) break;\n\n      if (nodes.length <= offsets[i]) {\n        current = nodes[nodes.length - 1];\n      } else {\n        current = nodes[offsets[i]];\n      }\n    }\n\n    return current;\n  },\n\n  /**\r\n   * @description Compares the style and class for equal values.\r\n   * Returns true if both are text nodes.\r\n   * @param {Node} a Node to compare\r\n   * @param {Node} b Node to compare\r\n   * @returns {Boolean}\r\n   */\n  isSameAttributes: function (a, b) {\n    if (a.nodeType === 3 && b.nodeType === 3) return true;\n    if (a.nodeType === 3 || b.nodeType === 3) return false;\n    const style_a = a.style;\n    const style_b = b.style;\n    let compStyle = 0;\n\n    for (let i = 0, len = style_a.length; i < len; i++) {\n      if (style_a[style_a[i]] === style_b[style_a[i]]) compStyle++;\n    }\n\n    const class_a = a.classList;\n    const class_b = b.classList;\n    const reg = this._w.RegExp;\n    let compClass = 0;\n\n    for (let i = 0, len = class_a.length; i < len; i++) {\n      if (reg('(\\s|^)' + class_a[i] + '(\\s|$)').test(class_b.value)) compClass++;\n    }\n\n    return compStyle === style_b.length && compStyle === style_a.length && compClass === class_b.length && compClass === class_a.length;\n  },\n\n  /**\r\n   * @description Check the line element(util.isFormatElement) is empty.\r\n   * @param {Element} element Format element node\r\n   * @returns {Boolean}\r\n   */\n  isEmptyLine: function (element) {\n    return !element || !element.parentNode || !element.querySelector('IMG, IFRAME, AUDIO, VIDEO, CANVAS, TABLE') && this.onlyZeroWidthSpace(element.textContent);\n  },\n\n  /**\r\n   * @description Check the span's attributes are empty.\r\n   * @param {Element|null} element Element node\r\n   * @returns {Boolean}\r\n   */\n  isSpanWithoutAttr: function (element) {\n    return !!element && element.nodeType === 1 && /^SPAN$/i.test(element.nodeName) && !element.className && !element.style.cssText;\n  },\n\n  /**\r\n   * @description Check the node is a list (ol, ul)\r\n   * @param {Node|String} node The element or element name to check\r\n   * @returns {Boolean}\r\n   */\n  isList: function (node) {\n    return node && /^(OL|UL)$/i.test(typeof node === 'string' ? node : node.nodeName);\n  },\n\n  /**\r\n   * @description Check the node is a list cell (li)\r\n   * @param {Node|String} node The element or element name to check\r\n   * @returns {Boolean}\r\n   */\n  isListCell: function (node) {\n    return node && /^LI$/i.test(typeof node === 'string' ? node : node.nodeName);\n  },\n\n  /**\r\n   * @description Check the node is a table (table, thead, tbody, tr, th, td)\r\n   * @param {Node|String} node The element or element name to check\r\n   * @returns {Boolean}\r\n   */\n  isTable: function (node) {\n    return node && /^(TABLE|THEAD|TBODY|TR|TH|TD)$/i.test(typeof node === 'string' ? node : node.nodeName);\n  },\n\n  /**\r\n   * @description Check the node is a table cell (td, th)\r\n   * @param {Node|String} node The element or element name to check\r\n   * @returns {Boolean}\r\n   */\n  isCell: function (node) {\n    return node && /^(TD|TH)$/i.test(typeof node === 'string' ? node : node.nodeName);\n  },\n\n  /**\r\n   * @description Check the node is a break node (BR)\r\n   * @param {Node|String} node The element or element name to check\r\n   * @returns {Boolean}\r\n   */\n  isBreak: function (node) {\n    return node && /^BR$/i.test(typeof node === 'string' ? node : node.nodeName);\n  },\n\n  /**\r\n   * @description Check the node is a anchor node (A)\r\n   * @param {Node|String} node The element or element name to check\r\n   * @returns {Boolean}\r\n   */\n  isAnchor: function (node) {\n    return node && /^A$/i.test(typeof node === 'string' ? node : node.nodeName);\n  },\n\n  /**\r\n   * @description Check the node is a media node (img, iframe, audio, video, canvas)\r\n   * @param {Node|String} node The element or element name to check\r\n   * @returns {Boolean}\r\n   */\n  isMedia: function (node) {\n    return node && /^(IMG|IFRAME|AUDIO|VIDEO|CANVAS)$/i.test(typeof node === 'string' ? node : node.nodeName);\n  },\n\n  /**\r\n   * @description Checks for numeric (with decimal point).\r\n   * @param {String|Number} text Text string or number\r\n   * @returns {Boolean}\r\n   */\n  isNumber: function (text) {\n    return !!text && /^-?\\d+(\\.\\d+)?$/.test(text + '');\n  },\n\n  /**\r\n   * @description Get a number.\r\n   * @param {String|Number} text Text string or number\r\n   * @param {Number} maxDec Maximum number of decimal places (-1 : Infinity)\r\n   * @returns {Number}\r\n   */\n  getNumber: function (text, maxDec) {\n    if (!text) return 0;\n    let number = (text + '').match(/-?\\d+(\\.\\d+)?/);\n    if (!number || !number[0]) return 0;\n    number = number[0];\n    return maxDec < 0 ? number * 1 : maxDec === 0 ? this._w.Math.round(number * 1) : (number * 1).toFixed(maxDec) * 1;\n  },\n\n  /**\r\n   * @description Get all \"children\" of the argument value element (Without text nodes)\r\n   * @param {Element} element element to get child node\r\n   * @param {Function|null} validation Conditional function\r\n   * @returns {Array}\r\n   */\n  getListChildren: function (element, validation) {\n    const children = [];\n    if (!element || !element.children || element.children.length === 0) return children;\n\n    validation = validation || function () {\n      return true;\n    };\n\n    (function recursionFunc(current) {\n      if (element !== current && validation(current)) {\n        children.push(current);\n      }\n\n      if (!!current.children) {\n        for (let i = 0, len = current.children.length; i < len; i++) {\n          recursionFunc(current.children[i]);\n        }\n      }\n    })(element);\n\n    return children;\n  },\n\n  /**\r\n   * @description Get all \"childNodes\" of the argument value element (Include text nodes)\r\n   * @param {Node} element element to get child node\r\n   * @param {Function|null} validation Conditional function\r\n   * @returns {Array}\r\n   */\n  getListChildNodes: function (element, validation) {\n    const children = [];\n    if (!element || element.childNodes.length === 0) return children;\n\n    validation = validation || function () {\n      return true;\n    };\n\n    (function recursionFunc(current) {\n      if (element !== current && validation(current)) {\n        children.push(current);\n      }\n\n      for (let i = 0, len = current.childNodes.length; i < len; i++) {\n        recursionFunc(current.childNodes[i]);\n      }\n    })(element);\n\n    return children;\n  },\n\n  /**\r\n   * @description Returns the number of parents nodes.\r\n   * \"0\" when the parent node is the WYSIWYG area.\r\n   * \"-1\" when the element argument is the WYSIWYG area.\r\n   * @param {Node} element The element to check\r\n   * @returns {Number}\r\n   */\n  getElementDepth: function (element) {\n    if (!element || this.isWysiwygDiv(element)) return -1;\n    let depth = 0;\n    element = element.parentNode;\n\n    while (element && !this.isWysiwygDiv(element)) {\n      depth += 1;\n      element = element.parentNode;\n    }\n\n    return depth;\n  },\n\n  /**\r\n   * @description Compares two elements to find a common ancestor, and returns the order of the two elements.\r\n   * @param {Node} a Node to compare.\r\n   * @param {Node} b Node to compare.\r\n   * @returns {Object} { ancesstor, a, b, result: (a > b ? 1 : a < b ? -1 : 0) };\r\n   */\n  compareElements: function (a, b) {\n    let aNode = a,\n        bNode = b;\n\n    while (aNode && bNode && aNode.parentNode !== bNode.parentNode) {\n      aNode = aNode.parentNode;\n      bNode = bNode.parentNode;\n    }\n\n    if (!aNode || !bNode) return {\n      ancestor: null,\n      a: a,\n      b: b,\n      result: 0\n    };\n    const children = aNode.parentNode.childNodes;\n    const aIndex = this.getArrayIndex(children, aNode);\n    const bIndex = this.getArrayIndex(children, bNode);\n    return {\n      ancestor: aNode.parentNode,\n      a: aNode,\n      b: bNode,\n      result: aIndex > bIndex ? 1 : aIndex < bIndex ? -1 : 0\n    };\n  },\n\n  /**\r\n   * @description Get the parent element of the argument value.\r\n   * A tag that satisfies the query condition is imported.\r\n   * Returns null if not found.\r\n   * @param {Node} element Reference element\r\n   * @param {String|Function} query Query String (nodeName, .className, #ID, :name) or validation function.\r\n   * Not use it like jquery.\r\n   * Only one condition can be entered at a time.\r\n   * @returns {Element|null}\r\n   */\n  getParentElement: function (element, query) {\n    let check;\n\n    if (typeof query === 'function') {\n      check = query;\n    } else {\n      let attr;\n\n      if (/^\\./.test(query)) {\n        attr = 'className';\n        query = query.split('.')[1];\n      } else if (/^#/.test(query)) {\n        attr = 'id';\n        query = '^' + query.split('#')[1] + '$';\n      } else if (/^:/.test(query)) {\n        attr = 'name';\n        query = '^' + query.split(':')[1] + '$';\n      } else {\n        attr = 'nodeName';\n        query = '^' + query + '$';\n      }\n\n      const regExp = new this._w.RegExp(query, 'i');\n\n      check = function (el) {\n        return regExp.test(el[attr]);\n      };\n    }\n\n    while (element && !check(element)) {\n      if (this.isWysiwygDiv(element)) {\n        return null;\n      }\n\n      element = element.parentNode;\n    }\n\n    return element;\n  },\n\n  /**\r\n   * @description Get the child element of the argument value.\r\n   * A tag that satisfies the query condition is imported.\r\n   * Returns null if not found.\r\n   * @param {Node} element Reference element\r\n   * @param {String|Function} query Query String (nodeName, .className, #ID, :name) or validation function.\r\n   * @param {Boolean} last If true returns the last node among the found child nodes. (default: first node)\r\n   * Not use it like jquery.\r\n   * Only one condition can be entered at a time.\r\n   * @returns {Element|null}\r\n   */\n  getChildElement: function (element, query, last) {\n    let check;\n\n    if (typeof query === 'function') {\n      check = query;\n    } else {\n      let attr;\n\n      if (/^\\./.test(query)) {\n        attr = 'className';\n        query = query.split('.')[1];\n      } else if (/^#/.test(query)) {\n        attr = 'id';\n        query = '^' + query.split('#')[1] + '$';\n      } else if (/^:/.test(query)) {\n        attr = 'name';\n        query = '^' + query.split(':')[1] + '$';\n      } else {\n        attr = 'nodeName';\n        query = '^' + (query === 'text' ? '#' + query : query) + '$';\n      }\n\n      const regExp = new this._w.RegExp(query, 'i');\n\n      check = function (el) {\n        return regExp.test(el[attr]);\n      };\n    }\n\n    const childList = this.getListChildNodes(element, function (current) {\n      return check(current);\n    });\n    return childList[last ? childList.length - 1 : 0];\n  },\n\n  /**\r\n   * @description 1. The first node of all the child nodes of the \"first\" element is returned.\r\n   * 2. The last node of all the child nodes of the \"last\" element is returned.\r\n   * 3. When there is no \"last\" element, the first and last nodes of all the children of the \"first\" element are returned.\r\n   * { sc: \"first\", ec: \"last\" }\r\n   * @param {Node} first First element\r\n   * @param {Node|null} last Last element\r\n   * @returns {Object}\r\n   */\n  getEdgeChildNodes: function (first, last) {\n    if (!first) return;\n    if (!last) last = first;\n\n    while (first && first.nodeType === 1 && first.childNodes.length > 0 && !this.isBreak(first)) first = first.firstChild;\n\n    while (last && last.nodeType === 1 && last.childNodes.length > 0 && !this.isBreak(last)) last = last.lastChild;\n\n    return {\n      sc: first,\n      ec: last || first\n    };\n  },\n\n  /**\r\n   * @description Returns the position of the left and top of argument. {left:0, top:0}\r\n   * @param {Node} element Target node\r\n   * @param {Element|null} wysiwygFrame When use iframe option, iframe object should be sent (context.element.wysiwygFrame)\r\n   * @returns {Object}\r\n   */\n  getOffset: function (element, wysiwygFrame) {\n    let offsetLeft = 0;\n    let offsetTop = 0;\n    let offsetElement = element.nodeType === 3 ? element.parentElement : element;\n    const wysiwyg = this.getParentElement(element, this.isWysiwygDiv.bind(this));\n\n    while (offsetElement && !this.hasClass(offsetElement, 'se-container') && offsetElement !== wysiwyg) {\n      offsetLeft += offsetElement.offsetLeft;\n      offsetTop += offsetElement.offsetTop;\n      offsetElement = offsetElement.offsetParent;\n    }\n\n    const iframe = wysiwygFrame && /iframe/i.test(wysiwygFrame.nodeName);\n    return {\n      left: offsetLeft + (iframe ? wysiwygFrame.parentElement.offsetLeft : 0),\n      top: offsetTop - (wysiwyg ? wysiwyg.scrollTop : 0) + (iframe ? wysiwygFrame.parentElement.offsetTop : 0)\n    };\n  },\n\n  /**\r\n   * @description It compares the start and end indexes of \"a\" and \"b\" and returns the number of overlapping indexes in the range.\r\n   * ex) 1, 5, 4, 6 => \"2\" (4 ~ 5)\r\n   * @param {Number} aStart Start index of \"a\"\r\n   * @param {Number} aEnd End index of \"a\"\r\n   * @param {Number} bStart Start index of \"b\"\r\n   * @param {Number} bEnd Start index of \"b\"\r\n   * @returns {Number}\r\n   */\n  getOverlapRangeAtIndex: function (aStart, aEnd, bStart, bEnd) {\n    if (aStart <= bEnd ? aEnd < bStart : aEnd > bStart) return 0;\n    const overlap = (aStart > bStart ? aStart : bStart) - (aEnd < bEnd ? aEnd : bEnd);\n    return (overlap < 0 ? overlap * -1 : overlap) + 1;\n  },\n\n  /**\r\n   * @description Set the text content value of the argument value element\r\n   * @param {Node} element Element to replace text content\r\n   * @param {String} txt Text to be applied\r\n   */\n  changeTxt: function (element, txt) {\n    if (!element || !txt) return;\n    element.textContent = txt;\n  },\n\n  /**\r\n   * @description Replace element\r\n   * @param {Element} element Target element\r\n   * @param {String|Element} newElement String or element of the new element to apply\r\n   */\n  changeElement: function (element, newElement) {\n    if (typeof newElement === 'string') {\n      if (element.outerHTML) {\n        element.outerHTML = newElement;\n      } else {\n        const doc = this.createElement('DIV');\n        doc.innerHTML = newElement;\n        newElement = doc.firstChild;\n        element.parentNode.replaceChild(newElement, element);\n      }\n    } else if (newElement.nodeType === 1) {\n      element.parentNode.replaceChild(newElement, element);\n    }\n  },\n\n  /**\r\n   * @description Set style, if all styles are deleted, the style properties are deleted.\r\n   * @param {Element} element Element to set style\r\n   * @param {String} styleName Style attribute name (marginLeft, textAlign...)\r\n   * @param {String|Number} value Style value\r\n   */\n  setStyle: function (element, styleName, value) {\n    element.style[styleName] = value;\n\n    if (!value && !element.style.cssText) {\n      element.removeAttribute('style');\n    }\n  },\n\n  /**\r\n   * @description Determine whether any of the matched elements are assigned the given class\r\n   * @param {Element} element Elements to search class name\r\n   * @param {String} className Class name to search for\r\n   * @returns {Boolean}\r\n   */\n  hasClass: function (element, className) {\n    if (!element) return;\n    return new this._w.RegExp(className).test(element.className);\n  },\n\n  /**\r\n   * @description Append the className value of the argument value element\r\n   * @param {Element} element Elements to add class name\r\n   * @param {String} className Class name to be add\r\n   */\n  addClass: function (element, className) {\n    if (!element) return;\n    const check = new this._w.RegExp('(\\\\s|^)' + className + '(\\\\s|$)');\n    if (check.test(element.className)) return;\n    element.className += (element.className.length > 0 ? ' ' : '') + className;\n  },\n\n  /**\r\n   * @description Delete the className value of the argument value element\r\n   * @param {Element} element Elements to remove class name\r\n   * @param {String} className Class name to be remove\r\n   */\n  removeClass: function (element, className) {\n    if (!element) return;\n    const check = new this._w.RegExp('(\\\\s|^)' + className + '(\\\\s|$)');\n    element.className = element.className.replace(check, ' ').trim();\n    if (!element.className.trim()) element.removeAttribute('class');\n  },\n\n  /**\r\n   * @description Argument value If there is no class name, insert it and delete the class name if it exists\r\n   * @param {Element} element Elements to replace class name\r\n   * @param {String} className Class name to be change\r\n   * @returns {Boolean|undefined}\r\n   */\n  toggleClass: function (element, className) {\n    if (!element) return;\n    let result = false;\n    const check = new this._w.RegExp('(\\\\s|^)' + className + '(\\\\s|$)');\n\n    if (check.test(element.className)) {\n      element.className = element.className.replace(check, ' ').trim();\n    } else {\n      element.className += ' ' + className;\n      result = true;\n    }\n\n    if (!element.className.trim()) element.removeAttribute('class');\n    return result;\n  },\n\n  /**\r\n   * @description Checks if element can't be easily enabled\r\n   * @param {Element} element Element to check for\r\n   */\n  isImportantDisabled: function (element) {\n    return element.hasAttribute('data-important-disabled');\n  },\n\n  /**\r\n   * @description In the predefined code view mode, the buttons except the executable button are changed to the 'disabled' state.\r\n   * core.codeViewDisabledButtons (An array of buttons whose class name is not \"se-code-view-enabled\")\r\n   * core.resizingDisabledButtons (An array of buttons whose class name is not \"se-resizing-enabled\")\r\n   * @param {Boolean} disabled Disabled value\r\n   * @param {Array|HTMLCollection|NodeList} buttonList Button array\r\n   * @param {Boolean} important If priveleged mode should be used (Necessary to switch importantDisabled buttons)\r\n   */\n  setDisabledButtons: function (disabled, buttonList, important) {\n    for (let i = 0, len = buttonList.length; i < len; i++) {\n      let button = buttonList[i];\n      if (important || !this.isImportantDisabled(button)) button.disabled = disabled;\n\n      if (important) {\n        if (disabled) {\n          button.setAttribute('data-important-disabled', '');\n        } else {\n          button.removeAttribute('data-important-disabled');\n        }\n      }\n    }\n  },\n\n  /**\r\n   * @description Delete argumenu value element\r\n   * @param {Node} item Node to be remove\r\n   */\n  removeItem: function (item) {\n    if (!item) return;\n    if (typeof item.remove === 'function') item.remove();else if (item.parentNode) item.parentNode.removeChild(item);\n  },\n\n  /**\r\n   * @description Delete all parent nodes that match the condition.\r\n   * Returns an {sc: previousSibling, ec: nextSibling}(the deleted node reference) or null.\r\n   * @param {Node} item Node to be remove\r\n   * @param {Function|null} validation Validation function. default(Deleted if it only have breakLine and blanks)\r\n   * @param {Element|null} stopParent Stop when the parent node reaches stopParent\r\n   * @returns {Object|null} {sc: previousSibling, ec: nextSibling}\r\n   */\n  removeItemAllParents: function (item, validation, stopParent) {\n    if (!item) return null;\n    let cc = null;\n\n    if (!validation) {\n      validation = function (current) {\n        if (current === stopParent || this.isComponent(current)) return false;\n        const text = current.textContent.trim();\n        return text.length === 0 || /^(\\n|\\u200B)+$/.test(text);\n      }.bind(this);\n    }\n\n    (function recursionFunc(element) {\n      if (!util.isWysiwygDiv(element)) {\n        const parent = element.parentNode;\n\n        if (parent && validation(element)) {\n          cc = {\n            sc: element.previousElementSibling,\n            ec: element.nextElementSibling\n          };\n          util.removeItem(element);\n          recursionFunc(parent);\n        }\n      }\n    })(item);\n\n    return cc;\n  },\n\n  /**\r\n   * @description Detach Nested all nested lists under the \"baseNode\".\r\n   * Returns a list with nested removed.\r\n   * @param {Node} baseNode Element on which to base.\r\n   * @param {Boolean} all If true, it also detach all nested lists of a returned list.\r\n   * @returns {Element}\r\n   */\n  detachNestedList: function (baseNode, all) {\n    const rNode = this._deleteNestedList(baseNode);\n\n    let rangeElement, cNodes;\n\n    if (rNode) {\n      rangeElement = rNode.cloneNode(false);\n      cNodes = rNode.childNodes;\n      const index = this.getPositionIndex(baseNode);\n\n      while (cNodes[index]) {\n        rangeElement.appendChild(cNodes[index]);\n      }\n    } else {\n      rangeElement = baseNode;\n    }\n\n    let rChildren;\n\n    if (!all) {\n      const depth = this.getElementDepth(baseNode) + 2;\n      rChildren = this.getListChildren(baseNode, function (current) {\n        return this.isListCell(current) && !current.previousElementSibling && this.getElementDepth(current) === depth;\n      }.bind(this));\n    } else {\n      rChildren = this.getListChildren(rangeElement, function (current) {\n        return this.isListCell(current) && !current.previousElementSibling;\n      }.bind(this));\n    }\n\n    for (let i = 0, len = rChildren.length; i < len; i++) {\n      this._deleteNestedList(rChildren[i]);\n    }\n\n    if (rNode) {\n      rNode.parentNode.insertBefore(rangeElement, rNode.nextSibling);\n      if (cNodes && cNodes.length === 0) this.removeItem(rNode);\n    }\n\n    return rangeElement === baseNode ? rangeElement.parentNode : rangeElement;\n  },\n\n  /**\r\n   * @description Sub function of util.detachNestedList method.\r\n   * @private\r\n   */\n  _deleteNestedList: function (baseNode) {\n    const baseParent = baseNode.parentNode;\n    let sibling = baseParent;\n    let parent = sibling.parentNode;\n    let liSibling, liParent, child, index, c;\n\n    while (this.isListCell(parent)) {\n      index = this.getPositionIndex(baseNode);\n      liSibling = parent.nextElementSibling;\n      liParent = parent.parentNode;\n      child = sibling;\n\n      while (child) {\n        sibling = sibling.nextSibling;\n\n        if (this.isList(child)) {\n          c = child.childNodes;\n\n          while (c[index]) {\n            liParent.insertBefore(c[index], liSibling);\n          }\n\n          if (c.length === 0) this.removeItem(child);\n        } else {\n          liParent.appendChild(child);\n        }\n\n        child = sibling;\n      }\n\n      sibling = liParent;\n      parent = liParent.parentNode;\n    }\n\n    if (baseParent.children.length === 0) this.removeItem(baseParent);\n    return liParent;\n  },\n\n  /**\r\n   * @description Split all tags based on \"baseNode\"\r\n   * Returns the last element of the splited tag.\r\n   * @param {Node} baseNode Element or text node on which to base\r\n   * @param {Number|Node|null} offset Text offset of \"baseNode\" (Only valid when \"baseNode\" is a text node)\r\n   * @param {Number} depth The nesting depth of the element being split. (default: 0)\r\n   * @returns {Element}\r\n   */\n  splitElement: function (baseNode, offset, depth) {\n    if (this.isWysiwygDiv(baseNode)) return baseNode;\n\n    if (!!offset && !this.isNumber(offset)) {\n      const children = baseNode.childNodes;\n      let index = this.getPositionIndex(offset);\n      const prev = baseNode.cloneNode(false);\n      const next = baseNode.cloneNode(false);\n\n      for (let i = 0, len = children.length; i < len; i++) {\n        if (i < index) prev.appendChild(children[i]);else if (i > index) next.appendChild(children[i]);else continue;\n        i--;\n        len--;\n        index--;\n      }\n\n      if (prev.childNodes.length > 0) baseNode.parentNode.insertBefore(prev, baseNode);\n      if (next.childNodes.length > 0) baseNode.parentNode.insertBefore(next, baseNode.nextElementSibling);\n      return baseNode;\n    }\n\n    const bp = baseNode.parentNode;\n    let index = 0,\n        newEl,\n        children,\n        temp;\n    let next = true;\n    if (!depth || depth < 0) depth = 0;\n\n    if (baseNode.nodeType === 3) {\n      index = this.getPositionIndex(baseNode);\n\n      if (offset >= 0) {\n        baseNode.splitText(offset);\n        const after = this.getNodeFromPath([index + 1], bp);\n        if (this.onlyZeroWidthSpace(after)) after.data = this.zeroWidthSpace;\n      }\n    } else if (baseNode.nodeType === 1) {\n      if (!baseNode.previousSibling) {\n        if (this.getElementDepth(baseNode) === depth) next = false;\n      } else {\n        baseNode = baseNode.previousSibling;\n      }\n    }\n\n    let depthEl = baseNode;\n\n    while (this.getElementDepth(depthEl) > depth) {\n      index = this.getPositionIndex(depthEl) + 1;\n      depthEl = depthEl.parentNode;\n      temp = newEl;\n      newEl = depthEl.cloneNode(false);\n      children = depthEl.childNodes;\n\n      if (temp) {\n        if (this.isListCell(newEl) && this.isList(temp) && temp.firstElementChild) {\n          newEl.innerHTML = temp.firstElementChild.innerHTML;\n          util.removeItem(temp.firstElementChild);\n          if (temp.children.length > 0) newEl.appendChild(temp);\n        } else {\n          newEl.appendChild(temp);\n        }\n      }\n\n      while (children[index]) {\n        newEl.appendChild(children[index]);\n      }\n    }\n\n    if (depthEl.childNodes.length <= 1 && (!depthEl.firstChild || depthEl.firstChild.textContent.length === 0)) depthEl.innerHTML = '<br>';\n    const pElement = depthEl.parentNode;\n    if (next) depthEl = depthEl.nextSibling;\n    if (!newEl) return depthEl;\n    this.mergeSameTags(newEl, null, false);\n    this.mergeNestedTags(newEl, function (current) {\n      return this.isList(current);\n    }.bind(this));\n    if (newEl.childNodes.length > 0) pElement.insertBefore(newEl, depthEl);else newEl = depthEl;\n    if (bp.childNodes.length === 0) this.removeItem(bp);\n    return newEl;\n  },\n\n  /**\r\n   * @description Use with \"npdePath (util.getNodePath)\" to merge the same attributes and tags if they are present and modify the nodepath.\r\n   * If \"offset\" has been changed, it will return as much \"offset\" as it has been modified.\r\n   * An array containing change offsets is returned in the order of the \"nodePathArray\" array.\r\n   * @param {Element} element Element\r\n   * @param {Array|null} nodePathArray Array of NodePath object ([util.getNodePath(), ..])\r\n   * @param {Boolean} onlyText If true, non-text nodes(!util._isIgnoreNodeChange) like 'span', 'strong'.. are ignored.\r\n   * @returns {Array} [offset, ..]\r\n   */\n  mergeSameTags: function (element, nodePathArray, onlyText) {\n    const inst = this;\n    const nodePathLen = nodePathArray ? nodePathArray.length : 0;\n    let offsets = null;\n\n    if (nodePathLen) {\n      offsets = this._w.Array.apply(null, new this._w.Array(nodePathLen)).map(this._w.Number.prototype.valueOf, 0);\n    }\n\n    (function recursionFunc(current, depth, depthIndex) {\n      const children = current.childNodes;\n\n      for (let i = 0, len = children.length, child, next; i < len; i++) {\n        child = children[i];\n        next = children[i + 1];\n        if (!child) break;\n\n        if (onlyText && inst._isIgnoreNodeChange(child) || !onlyText && (inst.isTable(child) || inst.isListCell(child) || inst.isFormatElement(child) && !inst.isFreeFormatElement(child))) {\n          if (inst.isTable(child) || inst.isListCell(child)) {\n            recursionFunc(child, depth + 1, i);\n          }\n\n          continue;\n        }\n\n        if (len === 1 && current.nodeName === child.nodeName && current.parentNode) {\n          // update nodePath\n          if (nodePathLen) {\n            let path, c, p, cDepth, spliceDepth;\n\n            for (let n = 0; n < nodePathLen; n++) {\n              path = nodePathArray[n];\n\n              if (path && path[depth] === i) {\n                c = child, p = current, cDepth = depth, spliceDepth = true;\n\n                while (cDepth >= 0) {\n                  if (inst.getArrayIndex(p.childNodes, c) !== path[cDepth]) {\n                    spliceDepth = false;\n                    break;\n                  }\n\n                  c = child.parentNode;\n                  p = c.parentNode;\n                  cDepth--;\n                }\n\n                if (spliceDepth) {\n                  path.splice(depth, 1);\n                  path[depth] = i;\n                }\n              }\n            }\n          } // merge tag\n\n\n          inst.copyTagAttributes(child, current);\n          current.parentNode.insertBefore(child, current);\n          inst.removeItem(current);\n        }\n\n        if (!next) {\n          if (child.nodeType === 1) recursionFunc(child, depth + 1, i);\n          break;\n        }\n\n        if (child.nodeName === next.nodeName && inst.isSameAttributes(child, next) && child.href === next.href) {\n          const childs = child.childNodes;\n          let childLength = 0;\n\n          for (let n = 0, nLen = childs.length; n < nLen; n++) {\n            if (childs[n].textContent.length > 0) childLength++;\n          }\n\n          const l = child.lastChild;\n          const r = next.firstChild;\n          let addOffset = 0;\n\n          if (l && r) {\n            const textOffset = l.nodeType === 3 && r.nodeType === 3;\n            addOffset = l.textContent.length;\n            let tempL = l.previousSibling;\n\n            while (tempL && tempL.nodeType === 3) {\n              addOffset += tempL.textContent.length;\n              tempL = tempL.previousSibling;\n            }\n\n            if (childLength > 0 && l.nodeType === 3 && r.nodeType === 3 && (l.textContent.length > 0 || r.textContent.length > 0)) childLength--;\n\n            if (nodePathLen) {\n              let path = null;\n\n              for (let n = 0; n < nodePathLen; n++) {\n                path = nodePathArray[n];\n\n                if (path && path[depth] > i) {\n                  if (depth > 0 && path[depth - 1] !== depthIndex) continue;\n                  path[depth] -= 1;\n\n                  if (path[depth + 1] >= 0 && path[depth] === i) {\n                    path[depth + 1] += childLength;\n\n                    if (textOffset) {\n                      if (l && l.nodeType === 3 && r && r.nodeType === 3) {\n                        offsets[n] += addOffset;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n\n          if (child.nodeType === 3) {\n            addOffset = child.textContent.length;\n            child.textContent += next.textContent;\n\n            if (nodePathLen) {\n              let path = null;\n\n              for (let n = 0; n < nodePathLen; n++) {\n                path = nodePathArray[n];\n\n                if (path && path[depth] > i) {\n                  if (depth > 0 && path[depth - 1] !== depthIndex) continue;\n                  path[depth] -= 1;\n\n                  if (path[depth + 1] >= 0 && path[depth] === i) {\n                    path[depth + 1] += childLength;\n                    offsets[n] += addOffset;\n                  }\n                }\n              }\n            }\n          } else {\n            child.innerHTML += next.innerHTML;\n          }\n\n          inst.removeItem(next);\n          i--;\n        } else if (child.nodeType === 1) {\n          recursionFunc(child, depth + 1, i);\n        }\n      }\n    })(element, 0, 0);\n\n    return offsets;\n  },\n\n  /**\r\n   * @description Remove nested tags without other child nodes.\r\n   * @param {Element} element Element object\r\n   * @param {Function|String|null} validation Validation function / String(\"tag1|tag2..\") / If null, all tags are applicable.\r\n   */\n  mergeNestedTags: function (element, validation) {\n    if (typeof validation === 'string') {\n      validation = function (current) {\n        return this.test(current.tagName);\n      }.bind(new this._w.RegExp('^(' + (validation ? validation : '.+') + ')$', 'i'));\n    } else if (typeof validation !== 'function') {\n      validation = function () {\n        return true;\n      };\n    }\n\n    (function recursionFunc(current) {\n      let children = current.children;\n\n      if (children.length === 1 && children[0].nodeName === current.nodeName && validation(current)) {\n        const temp = children[0];\n        children = temp.children;\n\n        while (children[0]) {\n          current.appendChild(children[0]);\n        }\n\n        current.removeChild(temp);\n      }\n\n      for (let i = 0, len = current.children.length; i < len; i++) {\n        recursionFunc(current.children[i]);\n      }\n    })(element);\n  },\n\n  /**\r\n   * @description Delete a empty child node of argument element\r\n   * @param {Element} element Element node\r\n   * @param {Node|null} notRemoveNode Do not remove node\r\n   */\n  removeEmptyNode: function (element, notRemoveNode) {\n    const inst = this;\n\n    if (notRemoveNode) {\n      notRemoveNode = inst.getParentElement(notRemoveNode, function (current) {\n        return element === current.parentElement;\n      });\n    }\n\n    (function recursionFunc(current) {\n      if (inst._notTextNode(current) || current === notRemoveNode || inst.isNonEditable(current)) return 0;\n\n      if (current !== element && inst.onlyZeroWidthSpace(current.textContent) && (!current.firstChild || !inst.isBreak(current.firstChild)) && !current.querySelector(inst._allowedEmptyNodeList)) {\n        if (current.parentNode) {\n          current.parentNode.removeChild(current);\n          return -1;\n        }\n      } else {\n        const children = current.children;\n\n        for (let i = 0, len = children.length, r = 0; i < len; i++) {\n          if (!children[i + r] || inst.isComponent(children[i + r])) continue;\n          r += recursionFunc(children[i + r]);\n        }\n      }\n\n      return 0;\n    })(element);\n\n    if (element.childNodes.length === 0) element.innerHTML = '<br>';\n  },\n\n  /**\r\n   * @description Remove whitespace between tags in HTML string.\r\n   * @param {String} html HTML string\r\n   * @returns {String}\r\n   */\n  htmlRemoveWhiteSpace: function (html) {\n    if (!html) return '';\n    return html.trim().replace(/<\\/?(?!strong|span|font|b|var|i|em|u|ins|s|strike|del|sub|sup|mark|a|label|code|summary)[^>^<]+>\\s+(?=<)/ig, function (m) {\n      return m.replace(/\\n/g, '').replace(/\\s+/, ' ');\n    });\n  },\n\n  /**\r\n   * @description Sort a element array by depth of element.\r\n   * @param {Array} array Array object\r\n   * @param {Boolean} des true: descending order / false: ascending order\r\n   */\n  sortByDepth: function (array, des) {\n    const t = !des ? -1 : 1;\n    const f = t * -1;\n    array.sort(function (a, b) {\n      if (!this.isListCell(a) || !this.isListCell(b)) return 0;\n      a = this.getElementDepth(a);\n      b = this.getElementDepth(b);\n      return a > b ? t : a < b ? f : 0;\n    }.bind(this));\n  },\n\n  /**\r\n   * @description Nodes that need to be added without modification when changing text nodes\r\n   * @param {Node} element Element to check\r\n   * @returns {Boolean}\r\n   * @private\r\n   */\n  _isIgnoreNodeChange: function (element) {\n    return element && element.nodeType !== 3 && (this.isNonEditable(element) || !this.isTextStyleElement(element));\n  },\n\n  /**\r\n   * @description Nodes that must remain undetached when changing text nodes (A, Label, Code, Span:font-size)\r\n   * @param {Node|String} element Element to check\r\n   * @returns {Boolean}\r\n   * @private\r\n   */\n  _isMaintainedNode: function (element) {\n    return element && element.nodeType !== 3 && /^(a|label|code|summary)$/i.test(typeof element === 'string' ? element : element.nodeName);\n  },\n\n  /**\r\n   * @description Node with font-size style\r\n   * @param {Node} element Element to check\r\n   * @returns {Boolean}\r\n   * @private\r\n   */\n  _isSizeNode: function (element) {\n    return element && element.nodeType !== 3 && this.isTextStyleElement(element) && !!element.style.fontSize;\n  },\n\n  /**\r\n   * @description Nodes without text\r\n   * @param {Node} element Element to check\r\n   * @returns {Boolean}\r\n   * @private\r\n   */\n  _notTextNode: function (element) {\n    return element && element.nodeType !== 3 && (this.isComponent(element) || /^(br|input|select|canvas|img|iframe|audio|video)$/i.test(typeof element === 'string' ? element : element.nodeName));\n  },\n\n  /**\r\n   * @description Check disallowed tags\r\n   * @param {Node} element Element to check\r\n   * @returns {Boolean}\r\n   * @private\r\n   */\n  _disallowedTags: function (element) {\n    return /^(meta|script|link|style|[a-z]+\\:[a-z]+)$/i.test(element.nodeName);\n  },\n\n  /**\r\n   * @description Create whitelist RegExp object.\r\n   * Return RegExp format: new RegExp(\"<\\\\/?\\\\b(?!\" + list + \")\\\\b[^>^<]*+>\", \"gi\")\r\n   * @param {String} list Tags list (\"br|p|div|pre...\")\r\n   * @returns {RegExp}\r\n   */\n  createTagsWhitelist: function (list) {\n    return new RegExp('<\\\\/?\\\\b(?!\\\\b' + (list || '').replace(/\\|/g, '\\\\b|\\\\b') + '\\\\b)[^>]*>', 'gi');\n  },\n\n  /**\r\n   * @description Create blacklist RegExp object.\r\n   * Return RegExp format: new RegExp(\"<\\\\/?\\\\b(?:\" + list + \")\\\\b[^>^<]*+>\", \"gi\")\r\n   * @param {String} list Tags list (\"br|p|div|pre...\")\r\n   * @returns {RegExp}\r\n   */\n  createTagsBlacklist: function (list) {\n    return new RegExp('<\\\\/?\\\\b(?:\\\\b' + (list || '^').replace(/\\|/g, '\\\\b|\\\\b') + '\\\\b)[^>]*>', 'gi');\n  },\n\n  /**\r\n   * @description Fix tags that do not fit the editor format.\r\n   * @param {Element} documentFragment Document fragment \"DOCUMENT_FRAGMENT_NODE\" (nodeType === 11)\r\n   * @param {RegExp} htmlCheckWhitelistRegExp Editor tags whitelist (core._htmlCheckWhitelistRegExp)\r\n   * @param {RegExp} htmlCheckBlacklistRegExp Editor tags blacklist (core._htmlCheckBlacklistRegExp)\r\n   * @param {Boolean} lowLevelCheck Row level check\r\n   * @private\r\n   */\n  _consistencyCheckOfHTML: function (documentFragment, htmlCheckWhitelistRegExp, htmlCheckBlacklistRegExp, lowLevelCheck) {\n    /**\r\n     * It is can use \".children(util.getListChildren)\" to exclude text nodes, but \"documentFragment.children\" is not supported in IE.\r\n     * So check the node type and exclude the text no (current.nodeType !== 1)\r\n     */\n    const removeTags = [],\n          emptyTags = [],\n          wrongList = [],\n          withoutFormatCells = []; // wrong position\n\n    const wrongTags = this.getListChildNodes(documentFragment, function (current) {\n      if (current.nodeType !== 1) {\n        if (this.isList(current.parentElement)) removeTags.push(current);\n        return false;\n      } // white list\n\n\n      if (htmlCheckBlacklistRegExp.test(current.nodeName) || !htmlCheckWhitelistRegExp.test(current.nodeName) && current.childNodes.length === 0 && this.isNotCheckingNode(current)) {\n        removeTags.push(current);\n        return false;\n      }\n\n      const nrtag = !this.getParentElement(current, this.isNotCheckingNode); // empty tags\n\n      if (!this.isTable(current) && !this.isListCell(current) && !this.isAnchor(current) && (this.isFormatElement(current) || this.isRangeFormatElement(current) || this.isTextStyleElement(current)) && current.childNodes.length === 0 && nrtag) {\n        emptyTags.push(current);\n        return false;\n      } // wrong list\n\n\n      if (this.isList(current.parentNode) && !this.isList(current) && !this.isListCell(current)) {\n        wrongList.push(current);\n        return false;\n      } // table cells\n\n\n      if (this.isCell(current)) {\n        const fel = current.firstElementChild;\n\n        if (!this.isFormatElement(fel) && !this.isRangeFormatElement(fel) && !this.isComponent(fel)) {\n          withoutFormatCells.push(current);\n          return false;\n        }\n      }\n\n      const result = current.parentNode !== documentFragment && nrtag && (this.isListCell(current) && !this.isList(current.parentNode) || lowLevelCheck && (this.isFormatElement(current) || this.isComponent(current)) && !this.isRangeFormatElement(current.parentNode) && !this.getParentElement(current, this.isComponent));\n      return result;\n    }.bind(this));\n\n    for (let i = 0, len = removeTags.length; i < len; i++) {\n      this.removeItem(removeTags[i]);\n    }\n\n    const checkTags = [];\n\n    for (let i = 0, len = wrongTags.length, t, p; i < len; i++) {\n      t = wrongTags[i];\n      p = t.parentNode;\n      if (!p || !p.parentNode) continue;\n\n      if (this.getParentElement(t, this.isListCell)) {\n        const cellChildren = t.childNodes;\n\n        for (let j = cellChildren.length - 1; len >= 0; j--) {\n          p.insertBefore(t, cellChildren[j]);\n        }\n\n        checkTags.push(t);\n      } else {\n        p.parentNode.insertBefore(t, p);\n        checkTags.push(p);\n      }\n    }\n\n    for (let i = 0, len = checkTags.length, t; i < len; i++) {\n      t = checkTags[i];\n\n      if (this.onlyZeroWidthSpace(t.textContent.trim())) {\n        this.removeItem(t);\n      }\n    }\n\n    for (let i = 0, len = emptyTags.length; i < len; i++) {\n      this.removeItem(emptyTags[i]);\n    }\n\n    for (let i = 0, len = wrongList.length, t, tp, children, p; i < len; i++) {\n      t = wrongList[i];\n      p = t.parentNode;\n      if (!p) continue;\n      tp = this.createElement('LI');\n\n      if (this.isFormatElement(t)) {\n        children = t.childNodes;\n\n        while (children[0]) {\n          tp.appendChild(children[0]);\n        }\n\n        p.insertBefore(tp, t);\n        this.removeItem(t);\n      } else {\n        t = t.nextSibling;\n        tp.appendChild(wrongList[i]);\n        p.insertBefore(tp, t);\n      }\n    }\n\n    for (let i = 0, len = withoutFormatCells.length, t, f; i < len; i++) {\n      t = withoutFormatCells[i];\n      f = this.createElement('DIV');\n      f.innerHTML = t.textContent.trim().length === 0 && t.children.length === 0 ? '<br>' : t.innerHTML;\n      t.innerHTML = f.outerHTML;\n    }\n  },\n  _setDefaultOptionStyle: function (options, defaultStyle) {\n    let optionStyle = '';\n    if (options.height) optionStyle += 'height:' + options.height + ';';\n    if (options.minHeight) optionStyle += 'min-height:' + options.minHeight + ';';\n    if (options.maxHeight) optionStyle += 'max-height:' + options.maxHeight + ';';\n    if (options.position) optionStyle += 'position:' + options.position + ';';\n    if (options.width) optionStyle += 'width:' + options.width + ';';\n    if (options.minWidth) optionStyle += 'min-width:' + options.minWidth + ';';\n    if (options.maxWidth) optionStyle += 'max-width:' + options.maxWidth + ';';\n    let top = '',\n        frame = '',\n        editor = '';\n    defaultStyle = optionStyle + defaultStyle;\n    const styleArr = defaultStyle.split(';');\n\n    for (let i = 0, len = styleArr.length, s; i < len; i++) {\n      s = styleArr[i].trim();\n      if (!s) continue;\n\n      if (/^(min-|max-)?width\\s*:/.test(s) || /^(z-index|position)\\s*:/.test(s)) {\n        top += s + ';';\n        continue;\n      }\n\n      if (/^(min-|max-)?height\\s*:/.test(s)) {\n        if (/^height/.test(s) && s.split(':')[1].trim() === 'auto') {\n          options.height = 'auto';\n        }\n\n        frame += s + ';';\n        continue;\n      }\n\n      editor += s + ';';\n    }\n\n    return {\n      top: top,\n      frame: frame,\n      editor: editor\n    };\n  },\n  _setIframeDocument: function (frame, options) {\n    frame.setAttribute('scrolling', 'auto');\n    frame.contentDocument.head.innerHTML = '' + '<meta charset=\"utf-8\" />' + '<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">' + this._setIframeCssTags(options);\n    frame.contentDocument.body.className = options._editableClass;\n    frame.contentDocument.body.setAttribute('contenteditable', true);\n  },\n  _setIframeCssTags: function (options) {\n    const linkNames = options.iframeCSSFileName;\n    const wRegExp = this._w.RegExp;\n    let tagString = '';\n\n    for (let f = 0, len = linkNames.length, path; f < len; f++) {\n      path = [];\n\n      if (/(^https?:\\/\\/)|(^data:text\\/css,)/.test(linkNames[f])) {\n        path.push(linkNames[f]);\n      } else {\n        const CSSFileName = new wRegExp('(^|.*[\\\\/])' + linkNames[f] + '(\\\\..+)?\\\\.css(?:\\\\?.*|;.*)?$', 'i');\n\n        for (let c = document.getElementsByTagName('link'), i = 0, len = c.length, styleTag; i < len; i++) {\n          styleTag = c[i].href.match(CSSFileName);\n          if (styleTag) path.push(styleTag[0]);\n        }\n      }\n\n      if (!path || path.length === 0) throw '[SUNEDITOR.constructor.iframe.fail] The suneditor CSS files installation path could not be automatically detected. Please set the option property \"iframeCSSFileName\" before creating editor instances.';\n\n      for (let i = 0, len = path.length; i < len; i++) {\n        tagString += '<link href=\"' + path[i] + '\" rel=\"stylesheet\">';\n      }\n    }\n\n    return tagString + (options.height === 'auto' ? '<style>\\n/** Iframe height auto */\\nbody{height: min-content; overflow: hidden;}\\n</style>' : '');\n  }\n};\nexport default util;","map":{"version":3,"names":["util","_d","_w","isIE","isIE_Edge","isOSX_IOS","isChromium","_propertiesInit","document","window","navigator","userAgent","indexOf","appVersion","test","platform","chrome","_allowedEmptyNodeList","_HTMLConvertor","contents","ec","replace","m","zeroWidthSpace","String","fromCharCode","zeroWidthRegExp","RegExp","onlyZeroWidthRegExp","onlyZeroWidthSpace","text","undefined","textContent","getXMLHttpRequest","ActiveXObject","e","e1","XMLHttpRequest","getValues","obj","Object","keys","map","i","camelToKebabCase","param","letter","toLowerCase","str","kebabToCamelCase","toUpperCase","createElement","elementName","createTextNode","HTMLEncoder","HTMLDecoder","hasOwn","key","_hasOwn","call","prototype","hasOwnProperty","getIncludePath","nameArray","extension","path","pathList","tagName","src","fileName","len","length","regExp","extRegExp","c","getElementsByTagName","push","editorTag","match","slice","location","href","name","getPageStyle","doc","cssText","sheets","styleSheets","rules","cssRules","cLen","getIframeDocument","iframe","wDocument","contentWindow","contentDocument","getAttributesToString","element","exceptAttrs","attributes","attrs","attrString","value","getByteLength","toString","encoder","encodeURIComponent","cr","cl","unescape","TextEncoder","encode","isWysiwygDiv","nodeType","hasClass","nodeName","isNonEditable","getAttribute","isTextStyleElement","isFormatElement","isComponent","isRangeFormatElement","isClosureRangeFormatElement","isFreeFormatElement","isClosureFreeFormatElement","className","isUneditableComponent","isMediaComponent","isNotCheckingNode","getFormatElement","validation","firstElementChild","parentNode","getRangeFormatElement","getFreeFormatElement","getClosureFreeFormatElement","copyTagAttributes","originEl","copyEl","style","classes","classList","addClass","removeAttribute","trim","copyFormatAttributes","cloneNode","getArrayItem","array","multi","arr","a","arrayIncludes","getArrayIndex","idx","nextIdx","item","prevIdx","getPositionIndex","node","previousSibling","getNodePath","_newOffsets","finds","getParentElement","el","temp","tempText","s","previous","removeItem","next","nextSibling","bind","reverse","getNodeFromPath","offsets","current","nodes","childNodes","isSameAttributes","b","style_a","style_b","compStyle","class_a","class_b","reg","compClass","isEmptyLine","querySelector","isSpanWithoutAttr","isList","isListCell","isTable","isCell","isBreak","isAnchor","isMedia","isNumber","getNumber","maxDec","number","Math","round","toFixed","getListChildren","children","recursionFunc","getListChildNodes","getElementDepth","depth","compareElements","aNode","bNode","ancestor","result","aIndex","bIndex","query","check","attr","split","getChildElement","last","childList","getEdgeChildNodes","first","firstChild","lastChild","sc","getOffset","wysiwygFrame","offsetLeft","offsetTop","offsetElement","parentElement","wysiwyg","offsetParent","left","top","scrollTop","getOverlapRangeAtIndex","aStart","aEnd","bStart","bEnd","overlap","changeTxt","txt","changeElement","newElement","outerHTML","innerHTML","replaceChild","setStyle","styleName","removeClass","toggleClass","isImportantDisabled","hasAttribute","setDisabledButtons","disabled","buttonList","important","button","setAttribute","remove","removeChild","removeItemAllParents","stopParent","cc","parent","previousElementSibling","nextElementSibling","detachNestedList","baseNode","all","rNode","_deleteNestedList","rangeElement","cNodes","index","appendChild","rChildren","insertBefore","baseParent","sibling","liSibling","liParent","child","splitElement","offset","prev","bp","newEl","splitText","after","data","depthEl","pElement","mergeSameTags","mergeNestedTags","nodePathArray","onlyText","inst","nodePathLen","Array","apply","Number","valueOf","depthIndex","_isIgnoreNodeChange","p","cDepth","spliceDepth","n","splice","childs","childLength","nLen","l","r","addOffset","textOffset","tempL","removeEmptyNode","notRemoveNode","_notTextNode","htmlRemoveWhiteSpace","html","sortByDepth","des","t","f","sort","_isMaintainedNode","_isSizeNode","fontSize","_disallowedTags","createTagsWhitelist","list","createTagsBlacklist","_consistencyCheckOfHTML","documentFragment","htmlCheckWhitelistRegExp","htmlCheckBlacklistRegExp","lowLevelCheck","removeTags","emptyTags","wrongList","withoutFormatCells","wrongTags","nrtag","fel","checkTags","cellChildren","j","tp","_setDefaultOptionStyle","options","defaultStyle","optionStyle","height","minHeight","maxHeight","position","width","minWidth","maxWidth","frame","editor","styleArr","_setIframeDocument","head","_setIframeCssTags","body","_editableClass","linkNames","iframeCSSFileName","wRegExp","tagString","CSSFileName","styleTag"],"sources":["/Users/jirayuyungmeesuk/Desktop/ v2/client/node_modules/suneditor/src/lib/util.js"],"sourcesContent":["/*\r\n * wysiwyg web editor\r\n *\r\n * suneditor.js\r\n * Copyright 2017 JiHong Lee.\r\n * MIT license.\r\n */\r\n'use strict';\r\n\r\n/**\r\n * @description utility function\r\n */\r\nconst util = {\r\n    _d: null,\r\n    _w: null,\r\n    isIE: null,\r\n    isIE_Edge: null,\r\n    isOSX_IOS: null,\r\n    isChromium: null,\r\n    _propertiesInit: function () {\r\n        if (this._d) return;\r\n        this._d =  document;\r\n        this._w = window;\r\n        this.isIE = navigator.userAgent.indexOf('Trident') > -1;\r\n        this.isIE_Edge = (navigator.userAgent.indexOf('Trident') > -1) || (navigator.appVersion.indexOf('Edge') > -1);\r\n        this.isOSX_IOS = /(Mac|iPhone|iPod|iPad)/.test(navigator.platform);\r\n        this.isChromium = !!window.chrome;\r\n    },\r\n\r\n    _allowedEmptyNodeList: '.se-component, pre, blockquote, hr, li, table, img, iframe, video, audio, canvas',\r\n\r\n    /**\r\n     * @description HTML Reserved Word Converter.\r\n     * @param {String} contents \r\n     * @returns {String} HTML string\r\n     * @private\r\n     */\r\n    _HTMLConvertor: function (contents) {\r\n        const ec = {'&': '&amp;', '\\u00A0': '&nbsp;', '\\'': '&apos;', '\"': '&quot;', '<': '&lt;', '>': '&gt;'};\r\n        return contents.replace(/&|\\u00A0|'|\"|<|>/g, function (m) {\r\n            return (typeof ec[m] === 'string') ? ec[m] : m;\r\n        });\r\n    },\r\n\r\n    /**\r\n     * @description Unicode Character 'ZERO WIDTH SPACE' (\\u200B)\r\n     */\r\n    zeroWidthSpace: String.fromCharCode(8203),\r\n\r\n    /**\r\n     * @description Regular expression to find 'zero width space' (/\\u200B/g)\r\n     */\r\n    zeroWidthRegExp: new RegExp(String.fromCharCode(8203), 'g'),\r\n\r\n    /**\r\n     * @description Regular expression to find only 'zero width space' (/^\\u200B+$/)\r\n     */\r\n    onlyZeroWidthRegExp: new RegExp('^' + String.fromCharCode(8203) + '+$'),\r\n\r\n    /**\r\n     * @description A method that checks If the text is blank or to see if it contains 'ZERO WIDTH SPACE' or empty (util.zeroWidthSpace)\r\n     * @param {String|Node} text String value or Node\r\n     * @returns {Boolean}\r\n     */\r\n    onlyZeroWidthSpace: function (text) {\r\n        if (text === null || text === undefined) return false;\r\n        if (typeof text !== 'string') text = text.textContent;\r\n        return text === '' || this.onlyZeroWidthRegExp.test(text);\r\n    },\r\n\r\n    /**\r\n     * @description Gets XMLHttpRequest object\r\n     * @returns {XMLHttpRequest|ActiveXObject}\r\n     */\r\n    getXMLHttpRequest: function () {\r\n        /** IE */\r\n        if (this._w.ActiveXObject) {\r\n            try {\r\n                return new ActiveXObject('Msxml2.XMLHTTP');\r\n            } catch (e) {\r\n                try {\r\n                    return new ActiveXObject('Microsoft.XMLHTTP');\r\n                } catch (e1) {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n        /** netscape */\r\n        else if (this._w.XMLHttpRequest) {\r\n            return new XMLHttpRequest();\r\n        }\r\n        /** fail */\r\n        else {\r\n            return null;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * @description Object.values\r\n     * @param {Object|null} obj Object parameter.\r\n     * @returns {Array}\r\n     */\r\n    getValues: function (obj) {\r\n        return !obj ? [] : this._w.Object.keys(obj).map(function (i) {\r\n            return obj[i];\r\n        });\r\n    },\r\n\r\n    /**\r\n     * @description Convert the CamelCase To the KebabCase.\r\n     * @param {String|Array} param [Camel string]\r\n     * @returns {String|Array}\r\n     */\r\n    camelToKebabCase: function (param) {\r\n        if (typeof param === 'string') {\r\n            return param.replace(/[A-Z]/g, function (letter) { return \"-\" + letter.toLowerCase(); });\r\n        } else {\r\n            return param.map(function(str) { return util.camelToKebabCase(str); });\r\n        }\r\n    },\r\n\r\n    /**\r\n     * @description Convert the KebabCase To the CamelCase.\r\n     * @param {String|Array} param [KebabCase string]\r\n     * @returns {String|Array}\r\n     */\r\n    kebabToCamelCase: function (param) {\r\n        if (typeof param === 'string') {\r\n            return param.replace(/-[a-zA-Z]/g, function (letter) { return letter.replace('-', '').toUpperCase(); });\r\n        } else {\r\n            return param.map(function(str) { return util.camelToKebabCase(str); });\r\n        }\r\n    },\r\n\r\n    /**\r\n     * @description Create Element node\r\n     * @param {String} elementName Element name\r\n     * @returns {Element}\r\n     */\r\n    createElement: function (elementName) {\r\n        return this._d.createElement(elementName);\r\n    },\r\n\r\n    /**\r\n     * @description Create text node\r\n     * @param {String} text text contents\r\n     * @returns {Node}\r\n     */\r\n    createTextNode: function (text) {\r\n        return this._d.createTextNode(text || '');\r\n    },\r\n\r\n    /**\r\n     * @description The editor checks tags by string.\r\n     * If there is \"<\" or \">\" in the attribute of tag, HTML is broken when checking the tag.\r\n     * When using an attribute with \"<\" or \">\", use \"HTMLEncoder\" to save. (ex: math(katex))\r\n     * @param {String} contents HTML or Text string\r\n     * @returns {String}\r\n     */\r\n    HTMLEncoder: function (contents) {\r\n        const ec = {'<': '$lt;', '>': '$gt;'};\r\n        return contents.replace(/<|>/g, function (m) {\r\n            return (typeof ec[m] === 'string') ? ec[m] : m;\r\n        });\r\n    },\r\n\r\n    /**\r\n     * @description The editor checks tags by string.\r\n     * If there is \"<\" or \">\" in the attribute of tag, HTML is broken when checking the tag.\r\n     * Decoder of data stored as \"HTMLEncoder\" (ex: math(katex))\r\n     * @param {String} contents HTML or Text string\r\n     * @returns {String}\r\n     */\r\n    HTMLDecoder: function (contents) {\r\n        const ec = {'$lt;': '<', '$gt;': '>'};\r\n        return contents.replace(/\\$lt;|\\$gt;/g, function (m) {\r\n            return (typeof ec[m] === 'string') ? ec[m] : m;\r\n        });\r\n    },\r\n\r\n    /**\r\n     * @description This method run Object.prototype.hasOwnProperty.call(obj, key)\r\n     * @param {Object} obj Object\r\n     * @param {String} key obj.key\r\n     * @returns {Boolean}\r\n     */\r\n    hasOwn: function (obj, key) {\r\n        return this._hasOwn.call(obj, key);\r\n    },\r\n    _hasOwn: Object.prototype.hasOwnProperty,\r\n\r\n    /**\r\n     * @deprecated\r\n     * @description Get the the tag path of the arguments value\r\n     * If not found, return the first found value\r\n     * @param {Array} nameArray File name array\r\n     * @param {String} extension js, css\r\n     * @returns {String}\r\n     */\r\n    getIncludePath: function (nameArray, extension) {\r\n        let path = '';\r\n        const pathList = [];\r\n        const tagName = extension === 'js' ? 'script' : 'link';\r\n        const src = extension === 'js' ? 'src' : 'href';\r\n        \r\n        let fileName = '(?:';\r\n        for (let i = 0, len = nameArray.length; i < len; i++) {\r\n            fileName += nameArray[i] + (i < len - 1 ? '|' : ')');\r\n        }\r\n\r\n        const regExp = new this._w.RegExp('(^|.*[\\\\/])' + fileName + '(\\\\.[^\\\\/]+)?\\.' + extension + '(?:\\\\?.*|;.*)?$', 'i');\r\n        const extRegExp = new this._w.RegExp('.+\\\\.' + extension + '(?:\\\\?.*|;.*)?$', 'i');\r\n            \r\n        for (let c = this._d.getElementsByTagName(tagName), i = 0; i < c.length; i++) {\r\n            if (extRegExp.test(c[i][src])) {\r\n                pathList.push(c[i]);\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < pathList.length; i++) {\r\n            let editorTag = pathList[i][src].match(regExp);\r\n            if (editorTag) {\r\n                path = editorTag[0];\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (path === '') path = pathList.length > 0 ? pathList[0][src] : '';\r\n\r\n        -1 === path.indexOf(':/') && '//' !== path.slice(0, 2) && (path = 0 === path.indexOf('/') ? location.href.match(/^.*?:\\/\\/[^\\/]*/)[0] + path : location.href.match(/^[^\\?]*\\/(?:)/)[0] + path);\r\n\r\n        if (!path) throw '[SUNEDITOR.util.getIncludePath.fail] The SUNEDITOR installation path could not be automatically detected. (name: +' + name + ', extension: ' + extension + ')';\r\n\r\n        return path;\r\n    },\r\n\r\n    /**\r\n     * @deprecated\r\n     * @description Returns the CSS text that has been applied to the current page.\r\n     * @param {Document|null} doc To get the CSS text of an document(core._wd). If null get the current document.\r\n     * @returns {String} Styles string\r\n     */\r\n    getPageStyle: function (doc) {\r\n        let cssText = '';\r\n        const sheets = (doc || this._d).styleSheets;\r\n        \r\n        for (let i = 0, len = sheets.length, rules; i < len; i++) {\r\n            try {\r\n                rules = sheets[i].cssRules;\r\n            } catch (e) {\r\n                continue;\r\n            }\r\n            \r\n            if (rules) {\r\n                for (let c = 0, cLen = rules.length; c < cLen; c++) {\r\n                    cssText += rules[c].cssText;\r\n                }\r\n            }\r\n        }\r\n\r\n        return cssText;\r\n    },\r\n\r\n    /**\r\n     * @description Get the argument iframe's document object\r\n     * @param {Element} iframe Iframe element (context.element.wysiwygFrame)\r\n     * @returns {Document}\r\n     */\r\n    getIframeDocument: function (iframe) {\r\n        let wDocument = iframe.contentWindow || iframe.contentDocument;\r\n        if (wDocument.document) wDocument = wDocument.document;\r\n        return wDocument;\r\n    },\r\n\r\n    /**\r\n     * @description Get attributes of argument element to string ('class=\"---\" name=\"---\" ')\r\n     * @param {Element} element Element object\r\n     * @param {Array|null} exceptAttrs Array of attribute names to exclude from the result\r\n     * @returns {String}\r\n     */\r\n    getAttributesToString: function (element, exceptAttrs) {\r\n        if (!element.attributes) return '';\r\n\r\n        const attrs = element.attributes;\r\n        let attrString = '';\r\n\r\n        for (let i = 0, len = attrs.length; i < len; i++) {\r\n            if (exceptAttrs && exceptAttrs.indexOf(attrs[i].name) > -1) continue;\r\n            attrString += attrs[i].name + '=\"' + attrs[i].value + '\" ';\r\n        }\r\n\r\n        return attrString;\r\n    },\r\n\r\n    /**\r\n     * @descriptionGets Get the length in bytes of a string.\r\n     * referencing code: \"https://github.com/shaan1974/myrdin/blob/master/expressions/string.js#L11\"\r\n     * @param {String} text String text\r\n     * @returns {Number}\r\n     */\r\n    getByteLength: function(text) {\r\n        if (!text || !text.toString) return 0;\r\n        text = text.toString();\r\n\r\n        const encoder = this._w.encodeURIComponent;\r\n        let cr, cl;\r\n        if (this.isIE_Edge) {\r\n            cl = this._w.unescape(encoder(text)).length;\r\n            cr = 0;\r\n\r\n            if (encoder(text).match(/(%0A|%0D)/gi) !== null) {\r\n                cr = encoder(text).match(/(%0A|%0D)/gi).length;\r\n            }\r\n\r\n            return cl + cr;\r\n        } else {\r\n            cl = (new this._w.TextEncoder('utf-8').encode(text)).length;\r\n            cr = 0;\r\n\r\n            if (encoder(text).match(/(%0A|%0D)/gi) !== null) {\r\n                cr = encoder(text).match(/(%0A|%0D)/gi).length;\r\n            }\r\n\r\n            return cl + cr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * @description It is judged whether it is the edit region top div element or iframe's body tag.\r\n     * @param {Node} element The node to check\r\n     * @returns {Boolean}\r\n     */\r\n    isWysiwygDiv: function (element) {\r\n        return element && element.nodeType === 1 && (this.hasClass(element, 'se-wrapper-wysiwyg') || /^BODY$/i.test(element.nodeName));\r\n    },\r\n\r\n    /**\r\n     * @description It is judged whether it is the contenteditable property is false.\r\n     * @param {Node} element The node to check\r\n     * @returns {Boolean}\r\n     */\r\n    isNonEditable: function (element) {\r\n        return element && element.nodeType === 1 && element.getAttribute('contenteditable') === 'false';\r\n    },\r\n\r\n    /**\r\n     * @description It is judged whether it is a node related to the text style.\r\n     * (strong|span|font|b|var|i|em|u|ins|s|strike|del|sub|sup|mark|a|label|code)\r\n     * @param {Node} element The node to check\r\n     * @returns {Boolean}\r\n     */\r\n    isTextStyleElement: function (element) {\r\n        return element && element.nodeType !== 3 && /^(strong|span|font|b|var|i|em|u|ins|s|strike|del|sub|sup|mark|a|label|code|summary)$/i.test(element.nodeName);\r\n    },\r\n\r\n    /**\r\n     * @description It is judged whether it is the format element (P, DIV, H[1-6], PRE, LI | class=\"__se__format__replace_xxx\")\r\n     * Format element also contain \"free format Element\"\r\n     * @param {Node} element The node to check\r\n     * @returns {Boolean}\r\n     */\r\n    isFormatElement: function (element) {\r\n        return element && element.nodeType === 1 && (/^(P|DIV|H[1-6]|PRE|LI|TH|TD|DETAILS)$/i.test(element.nodeName) || this.hasClass(element, '(\\\\s|^)__se__format__replace_.+(\\\\s|$)|(\\\\s|^)__se__format__free_.+(\\\\s|$)')) && !this.isComponent(element) && !this.isWysiwygDiv(element);\r\n    },\r\n\r\n    /**\r\n     * @description It is judged whether it is the range format element. (BLOCKQUOTE, OL, UL, FIGCAPTION, TABLE, THEAD, TBODY, TR, TH, TD | class=\"__se__format__range_xxx\")\r\n     * Range format element is wrap the \"format element\" and \"component\"\r\n     * @param {Node} element The node to check\r\n     * @returns {Boolean}\r\n     */\r\n    isRangeFormatElement: function (element) {\r\n        return element && element.nodeType === 1 && (/^(BLOCKQUOTE|OL|UL|FIGCAPTION|TABLE|THEAD|TBODY|TR|TH|TD|DETAILS)$/i.test(element.nodeName) || this.hasClass(element, '(\\\\s|^)__se__format__range_.+(\\\\s|$)'));\r\n    },\r\n\r\n    /**\r\n     * @description It is judged whether it is the closure range format element. (TH, TD | class=\"__se__format__range__closure_xxx\")\r\n     * Closure range format elements is included in the range format element.\r\n     *  - Closure range format element is wrap the \"format element\" and \"component\"\r\n     * ※ You cannot exit this format with the Enter key or Backspace key.\r\n     * ※ Use it only in special cases. ([ex] format of table cells)\r\n     * @param {Node} element The node to check\r\n     * @returns {Boolean}\r\n     */\r\n    isClosureRangeFormatElement: function (element) {\r\n        return element && element.nodeType === 1 && (/^(TH|TD)$/i.test(element.nodeName) || this.hasClass(element, '(\\\\s|^)__se__format__range__closure_.+(\\\\s|$)'));\r\n    },\r\n\r\n    /**\r\n     * @description It is judged whether it is the free format element. (PRE | class=\"__se__format__free_xxx\")\r\n     * Free format elements is included in the format element.\r\n     * Free format elements's line break is \"BR\" tag.\r\n     * ※ Entering the Enter key in the space on the last line ends \"Free Format\" and appends \"Format\".\r\n     * @param {Node} element The node to check\r\n     * @returns {Boolean}\r\n     */\r\n    isFreeFormatElement: function (element) {\r\n        return element && element.nodeType === 1 && (/^PRE$/i.test(element.nodeName) || this.hasClass(element, '(\\\\s|^)__se__format__free_.+(\\\\s|$)')) && !this.isComponent(element) && !this.isWysiwygDiv(element);\r\n    },\r\n\r\n    /**\r\n     * @description It is judged whether it is the closure free format element. (class=\"__se__format__free__closure_xxx\")\r\n     * Closure free format elements is included in the free format element.\r\n     *  - Closure free format elements's line break is \"BR\" tag.\r\n     * ※ You cannot exit this format with the Enter key or Backspace key.\r\n     * ※ Use it only in special cases. ([ex] format of table cells)\r\n     * @param {Node} element The node to check\r\n     * @returns {Boolean}\r\n     */\r\n    isClosureFreeFormatElement: function (element) {\r\n        return element && element.nodeType === 1 && this.hasClass(element, '(\\\\s|^)__se__format__free__closure_.+(\\\\s|$)');\r\n    },\r\n\r\n    /**\r\n     * @description It is judged whether it is the component[img, iframe, video, audio, table] cover(class=\"se-component\") and table, hr\r\n     * @param {Node} element The node to check\r\n     * @returns {Boolean}\r\n     */\r\n    isComponent: function (element) {\r\n        return element && (/se-component/.test(element.className) || /^(TABLE|HR)$/.test(element.nodeName));\r\n    },\r\n\r\n    /**\r\n     * @description Checks for \"__se__uneditable\" in the class list.\r\n     * Components with class \"__se__uneditable\" cannot be modified.\r\n     * @param {Element} element The element to check\r\n     * @returns {Boolean}\r\n     */\r\n    isUneditableComponent: function (element) {\r\n        return element && this.hasClass(element, '__se__uneditable');\r\n    },\r\n\r\n    /**\r\n     * @description It is judged whether it is the component [img, iframe] cover(class=\"se-component\")\r\n     * @param {Node} element The node to check\r\n     * @returns {Boolean}\r\n     */\r\n    isMediaComponent: function (element) {\r\n        return element && /se-component/.test(element.className);\r\n    },\r\n\r\n    /**\r\n     * @description It is judged whether it is the not checking node. (class=\"katex\", \"__se__tag\")\r\n     * @param {Node} element The node to check\r\n     * @returns {Boolean}\r\n     */\r\n    isNotCheckingNode: function (element) {\r\n        return element && /katex|__se__tag/.test(element.className);\r\n    },\r\n\r\n    /**\r\n     * @description If a parent node that contains an argument node finds a format node (util.isFormatElement), it returns that node.\r\n     * @param {Node} element Reference node.\r\n     * @param {Function|null} validation Additional validation function.\r\n     * @returns {Element|null}\r\n     */\r\n    getFormatElement: function (element, validation) {\r\n        if (!element) return null;\r\n        if (!validation) {\r\n            validation = function () { return true; };\r\n        }\r\n\r\n        while (element) {\r\n            if (this.isWysiwygDiv(element)) return null;\r\n            if (this.isRangeFormatElement(element)) element.firstElementChild;\r\n            if (this.isFormatElement(element) && validation(element)) return element;\r\n\r\n            element = element.parentNode;\r\n        }\r\n        \r\n        return null;\r\n    },\r\n\r\n    /**\r\n     * @description If a parent node that contains an argument node finds a format node (util.isRangeFormatElement), it returns that node.\r\n     * @param {Node} element Reference node.\r\n     * @param {Function|null} validation Additional validation function.\r\n     * @returns {Element|null}\r\n     */\r\n    getRangeFormatElement: function (element, validation) {\r\n        if (!element) return null;\r\n        if (!validation) {\r\n            validation = function () { return true; };\r\n        }\r\n\r\n        while (element) {\r\n            if (this.isWysiwygDiv(element)) return null;\r\n            if (this.isRangeFormatElement(element) && !/^(THEAD|TBODY|TR)$/i.test(element.nodeName) && validation(element)) return element;\r\n            element = element.parentNode;\r\n        }\r\n\r\n        return null;\r\n    },\r\n\r\n    /**\r\n     * @description If a parent node that contains an argument node finds a free format node (util.isFreeFormatElement), it returns that node.\r\n     * @param {Node} element Reference node.\r\n     * @param {Function|null} validation Additional validation function.\r\n     * @returns {Element|null}\r\n     */\r\n    getFreeFormatElement: function (element, validation) {\r\n        if (!element) return null;\r\n        if (!validation) {\r\n            validation = function () { return true; };\r\n        }\r\n\r\n        while (element) {\r\n            if (this.isWysiwygDiv(element)) return null;\r\n            if (this.isFreeFormatElement(element) && validation(element)) return element;\r\n\r\n            element = element.parentNode;\r\n        }\r\n        \r\n        return null;\r\n    },\r\n\r\n    /**\r\n     * @description If a parent node that contains an argument node finds a closure free format node (util.isClosureFreeFormatElement), it returns that node.\r\n     * @param {Node} element Reference node.\r\n     * @param {Function|null} validation Additional validation function.\r\n     * @returns {Element|null}\r\n     */\r\n    getClosureFreeFormatElement: function (element, validation) {\r\n        if (!element) return null;\r\n        if (!validation) {\r\n            validation = function () { return true; };\r\n        }\r\n\r\n        while (element) {\r\n            if (this.isWysiwygDiv(element)) return null;\r\n            if (this.isClosureFreeFormatElement(element) && validation(element)) return element;\r\n\r\n            element = element.parentNode;\r\n        }\r\n        \r\n        return null;\r\n    },\r\n\r\n    /**\r\n     * @description Add style and className of copyEl to originEl\r\n     * @param {Element} originEl Origin element\r\n     * @param {Element} copyEl Element to copy\r\n     */\r\n    copyTagAttributes: function (originEl, copyEl) {\r\n        if (copyEl.style.cssText) {\r\n            originEl.style.cssText += copyEl.style.cssText;\r\n        }\r\n\r\n        const classes = copyEl.classList;\r\n        for (let i = 0, len = classes.length; i < len; i++) {\r\n            this.addClass(originEl, classes[i]);\r\n        }\r\n\r\n        if (!originEl.style.cssText) originEl.removeAttribute('style');\r\n        if (!originEl.className.trim()) originEl.removeAttribute('class');\r\n    },\r\n\r\n    /**\r\n     * @description Copy and apply attributes of format tag that should be maintained. (style, class) Ignore \"__se__format__\" class\r\n     * @param {Element} originEl Origin element\r\n     * @param {Element} copyEl Element to copy\r\n     */\r\n    copyFormatAttributes: function (originEl, copyEl) {\r\n        copyEl = copyEl.cloneNode(false);\r\n        copyEl.className = copyEl.className.replace(/(\\s|^)__se__format__[^\\s]+/g, '');\r\n        this.copyTagAttributes(originEl, copyEl);\r\n    },\r\n\r\n    /**\r\n     * @description Get the item from the array that matches the condition.\r\n     * @param {Array|HTMLCollection|NodeList} array Array to get item\r\n     * @param {Function|null} validation Conditional function\r\n     * @param {Boolean} multi If true, returns all items that meet the criteria otherwise, returns an empty array.\r\n     * If false, returns only one item that meet the criteria otherwise return null.\r\n     * @returns {Array|Node|null}\r\n     */\r\n    getArrayItem: function (array, validation, multi) {\r\n        if (!array || array.length === 0) return null;\r\n\r\n        validation = validation || function () { return true; };\r\n        const arr = [];\r\n        \r\n        for (let i = 0, len = array.length, a; i < len; i++) {\r\n            a = array[i];\r\n            if (validation(a)) {\r\n                if (!multi) return a;\r\n                else arr.push(a);\r\n            }\r\n        }\r\n\r\n        return !multi ? null : arr;\r\n    },\r\n\r\n    /**\r\n     * @description Check if an array contains an element \r\n     * @param {Array|HTMLCollection|NodeList} array element array\r\n     * @param {Node} element The element to check for\r\n     * @returns {Boolean}\r\n     */\r\n    arrayIncludes: function(array, element) {\r\n        for (let i = 0; i < array.length; i++) {\r\n            if (array[i] === element) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    },\r\n\r\n    /**\r\n     * @description Get the index of the argument value in the element array\r\n     * @param {Array|HTMLCollection|NodeList} array element array\r\n     * @param {Node} element The element to find index\r\n     * @returns {Number}\r\n     */\r\n    getArrayIndex: function (array, element) {\r\n        let idx = -1;\r\n        for (let i = 0, len = array.length; i < len; i++) {\r\n            if (array[i] === element) {\r\n                idx = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return idx;\r\n    },\r\n\r\n    /**\r\n     * @description Get the next index of the argument value in the element array\r\n     * @param {Array|HTMLCollection|NodeList} array element array\r\n     * @param {Node} item The element to find index\r\n     * @returns {Number}\r\n     */\r\n    nextIdx: function (array, item) {\r\n        let idx = this.getArrayIndex(array, item);\r\n        if (idx === -1) return -1;\r\n        return idx + 1;\r\n    },\r\n\r\n    /**\r\n     * @description Get the previous index of the argument value in the element array\r\n     * @param {Array|HTMLCollection|NodeList} array Element array\r\n     * @param {Node} item The element to find index\r\n     * @returns {Number}\r\n     */\r\n    prevIdx: function (array, item) {\r\n        let idx = this.getArrayIndex(array, item);\r\n        if (idx === -1) return -1;\r\n        return idx - 1;\r\n    },\r\n\r\n    /**\r\n     * @description Returns the index compared to other sibling nodes.\r\n     * @param {Node} node The Node to find index\r\n     * @returns {Number}\r\n     */\r\n    getPositionIndex: function (node) {\r\n        let idx = 0;\r\n        while ((node = node.previousSibling)) {\r\n            idx += 1;\r\n        }\r\n        return idx;\r\n    },\r\n\r\n    /**\r\n     * @description Returns the position of the \"node\" in the \"parentNode\" in a numerical array.\r\n     * ex) <p><span>aa</span><span>bb</span></p> : getNodePath(node: \"bb\", parentNode: \"<P>\") -> [1, 0]\r\n     * @param {Node} node The Node to find position path\r\n     * @param {Node|null} parentNode Parent node. If null, wysiwyg div area\r\n     * @param {Object|null} _newOffsets If you send an object of the form \"{s: 0, e: 0}\", the text nodes that are attached together are merged into one, centered on the \"node\" argument.\r\n     * \"_newOffsets.s\" stores the length of the combined characters after \"node\" and \"_newOffsets.e\" stores the length of the combined characters before \"node\".\r\n     * Do not use unless absolutely necessary.\r\n     * @returns {Array}\r\n     */\r\n    getNodePath: function (node, parentNode, _newOffsets) {\r\n        const path = [];\r\n        let finds = true;\r\n\r\n        this.getParentElement(node, function (el) {\r\n            if (el === parentNode) finds = false;\r\n            if (finds && !this.isWysiwygDiv(el)) {\r\n                // merge text nodes\r\n                if (_newOffsets && el.nodeType === 3) {\r\n                    let temp = null, tempText = null;\r\n                    _newOffsets.s = _newOffsets.e = 0;\r\n\r\n                    let previous = el.previousSibling;\r\n                    while (previous && previous.nodeType === 3) {\r\n                        tempText = previous.textContent.replace(this.zeroWidthRegExp, '');\r\n                        _newOffsets.s += tempText.length;\r\n                        el.textContent = tempText + el.textContent;\r\n                        temp = previous;\r\n                        previous = previous.previousSibling;\r\n                        this.removeItem(temp);\r\n                    }\r\n\r\n                    let next = el.nextSibling;\r\n                    while (next && next.nodeType === 3) {\r\n                        tempText = next.textContent.replace(this.zeroWidthRegExp, '');\r\n                        _newOffsets.e += tempText.length;\r\n                        el.textContent += tempText;\r\n                        temp = next;\r\n                        next = next.nextSibling;\r\n                        this.removeItem(temp);\r\n                    }\r\n                }\r\n\r\n                // index push\r\n                path.push(el);\r\n            }\r\n            return false;\r\n        }.bind(this));\r\n        \r\n        return path.map(this.getPositionIndex).reverse();\r\n    },\r\n\r\n    /**\r\n     * @description Returns the node in the location of the path array obtained from \"util.getNodePath\".\r\n     * @param {Array} offsets Position array, array obtained from \"util.getNodePath\"\r\n     * @param {Node} parentNode Base parent element\r\n     * @returns {Node}\r\n     */\r\n    getNodeFromPath: function (offsets, parentNode) {\r\n        let current = parentNode;\r\n        let nodes;\r\n\r\n        for (let i = 0, len = offsets.length; i < len; i++) {\r\n            nodes = current.childNodes;\r\n            if (nodes.length === 0) break;\r\n            if (nodes.length <= offsets[i]) {\r\n                current = nodes[nodes.length - 1];\r\n            } else {\r\n                current = nodes[offsets[i]];\r\n            }\r\n        }\r\n\r\n        return current;\r\n    },\r\n\r\n    /**\r\n     * @description Compares the style and class for equal values.\r\n     * Returns true if both are text nodes.\r\n     * @param {Node} a Node to compare\r\n     * @param {Node} b Node to compare\r\n     * @returns {Boolean}\r\n     */\r\n    isSameAttributes: function (a, b) {\r\n        if (a.nodeType === 3 && b.nodeType === 3) return true;\r\n        if (a.nodeType === 3 || b.nodeType === 3) return false;\r\n\r\n        const style_a = a.style;\r\n        const style_b = b.style;\r\n        let compStyle = 0;\r\n\r\n        for (let i = 0, len = style_a.length; i < len; i++) {\r\n            if (style_a[style_a[i]] === style_b[style_a[i]]) compStyle++;\r\n        }\r\n\r\n        const class_a = a.classList;\r\n        const class_b = b.classList;\r\n        const reg = this._w.RegExp;\r\n        let compClass = 0;\r\n\r\n        for (let i = 0, len = class_a.length; i < len; i++) {\r\n            if (reg('(\\s|^)' + class_a[i] + '(\\s|$)').test(class_b.value)) compClass++;\r\n        }\r\n\r\n        return (compStyle === style_b.length && compStyle === style_a.length) && (compClass === class_b.length && compClass === class_a.length);\r\n    },\r\n\r\n    /**\r\n     * @description Check the line element(util.isFormatElement) is empty.\r\n     * @param {Element} element Format element node\r\n     * @returns {Boolean}\r\n     */\r\n    isEmptyLine: function (element) {\r\n        return !element || !element.parentNode || (!element.querySelector('IMG, IFRAME, AUDIO, VIDEO, CANVAS, TABLE') && this.onlyZeroWidthSpace(element.textContent));\r\n    },\r\n\r\n    /**\r\n     * @description Check the span's attributes are empty.\r\n     * @param {Element|null} element Element node\r\n     * @returns {Boolean}\r\n     */\r\n    isSpanWithoutAttr: function (element) {\r\n        return !!element && element.nodeType === 1 && /^SPAN$/i.test(element.nodeName) && !element.className && !element.style.cssText;\r\n    },\r\n\r\n    /**\r\n     * @description Check the node is a list (ol, ul)\r\n     * @param {Node|String} node The element or element name to check\r\n     * @returns {Boolean}\r\n     */\r\n    isList: function (node) {\r\n        return node && /^(OL|UL)$/i.test(typeof node === 'string' ? node : node.nodeName);\r\n    },\r\n\r\n    /**\r\n     * @description Check the node is a list cell (li)\r\n     * @param {Node|String} node The element or element name to check\r\n     * @returns {Boolean}\r\n     */\r\n    isListCell: function (node) {\r\n        return node && /^LI$/i.test(typeof node === 'string' ? node : node.nodeName);\r\n    },\r\n\r\n    /**\r\n     * @description Check the node is a table (table, thead, tbody, tr, th, td)\r\n     * @param {Node|String} node The element or element name to check\r\n     * @returns {Boolean}\r\n     */\r\n    isTable: function (node) {\r\n        return node && /^(TABLE|THEAD|TBODY|TR|TH|TD)$/i.test(typeof node === 'string' ? node : node.nodeName);\r\n    },\r\n\r\n    /**\r\n     * @description Check the node is a table cell (td, th)\r\n     * @param {Node|String} node The element or element name to check\r\n     * @returns {Boolean}\r\n     */\r\n    isCell: function (node) {\r\n        return node && /^(TD|TH)$/i.test(typeof node === 'string' ? node : node.nodeName);\r\n    },\r\n\r\n    /**\r\n     * @description Check the node is a break node (BR)\r\n     * @param {Node|String} node The element or element name to check\r\n     * @returns {Boolean}\r\n     */\r\n    isBreak: function (node) {\r\n        return node && /^BR$/i.test(typeof node === 'string' ? node : node.nodeName);\r\n    },\r\n\r\n\r\n    /**\r\n     * @description Check the node is a anchor node (A)\r\n     * @param {Node|String} node The element or element name to check\r\n     * @returns {Boolean}\r\n     */\r\n    isAnchor: function (node) {\r\n        return node && /^A$/i.test(typeof node === 'string' ? node : node.nodeName);\r\n    },\r\n\r\n    /**\r\n     * @description Check the node is a media node (img, iframe, audio, video, canvas)\r\n     * @param {Node|String} node The element or element name to check\r\n     * @returns {Boolean}\r\n     */\r\n    isMedia: function (node) {\r\n        return node && /^(IMG|IFRAME|AUDIO|VIDEO|CANVAS)$/i.test(typeof node === 'string' ? node : node.nodeName);\r\n    },\r\n\r\n    /**\r\n     * @description Checks for numeric (with decimal point).\r\n     * @param {String|Number} text Text string or number\r\n     * @returns {Boolean}\r\n     */\r\n    isNumber: function (text) {\r\n        return !!text && /^-?\\d+(\\.\\d+)?$/.test(text + '');\r\n    },\r\n\r\n    /**\r\n     * @description Get a number.\r\n     * @param {String|Number} text Text string or number\r\n     * @param {Number} maxDec Maximum number of decimal places (-1 : Infinity)\r\n     * @returns {Number}\r\n     */\r\n    getNumber: function (text, maxDec) {\r\n        if (!text) return 0;\r\n        \r\n        let number = (text + '').match(/-?\\d+(\\.\\d+)?/);\r\n        if (!number || !number[0]) return 0;\r\n\r\n        number = number[0];\r\n        return maxDec < 0 ? number * 1 : maxDec === 0 ? this._w.Math.round(number * 1) : (number * 1).toFixed(maxDec) * 1;\r\n    },\r\n\r\n    /**\r\n     * @description Get all \"children\" of the argument value element (Without text nodes)\r\n     * @param {Element} element element to get child node\r\n     * @param {Function|null} validation Conditional function\r\n     * @returns {Array}\r\n     */\r\n    getListChildren: function (element, validation) {\r\n        const children = [];\r\n        if (!element || !element.children || element.children.length === 0) return children;\r\n\r\n        validation = validation || function () { return true; };\r\n\r\n        (function recursionFunc(current) {\r\n            if (element !== current && validation(current)) {\r\n                children.push(current);\r\n            }\r\n\r\n            if (!!current.children) {\r\n                for (let i = 0, len = current.children.length; i < len; i++) {\r\n                    recursionFunc(current.children[i]);\r\n                }\r\n            }\r\n        })(element);\r\n\r\n        return children;\r\n    },\r\n\r\n    /**\r\n     * @description Get all \"childNodes\" of the argument value element (Include text nodes)\r\n     * @param {Node} element element to get child node\r\n     * @param {Function|null} validation Conditional function\r\n     * @returns {Array}\r\n     */\r\n    getListChildNodes: function (element, validation) {\r\n        const children = [];\r\n        if (!element || element.childNodes.length === 0) return children;\r\n\r\n        validation = validation || function () { return true; };\r\n\r\n        (function recursionFunc(current) {\r\n            if (element !== current && validation(current)) {\r\n                children.push(current);\r\n            }\r\n\r\n            for (let i = 0, len = current.childNodes.length; i < len; i++) {\r\n                recursionFunc(current.childNodes[i]);\r\n            }\r\n        })(element);\r\n\r\n        return children;\r\n    },\r\n\r\n    /**\r\n     * @description Returns the number of parents nodes.\r\n     * \"0\" when the parent node is the WYSIWYG area.\r\n     * \"-1\" when the element argument is the WYSIWYG area.\r\n     * @param {Node} element The element to check\r\n     * @returns {Number}\r\n     */\r\n    getElementDepth: function (element) {\r\n        if (!element || this.isWysiwygDiv(element)) return -1;\r\n\r\n        let depth = 0;\r\n        element = element.parentNode;\r\n\r\n        while (element && !this.isWysiwygDiv(element)) {\r\n            depth += 1;\r\n            element = element.parentNode;\r\n        }\r\n\r\n        return depth;\r\n    },\r\n\r\n    /**\r\n     * @description Compares two elements to find a common ancestor, and returns the order of the two elements.\r\n     * @param {Node} a Node to compare.\r\n     * @param {Node} b Node to compare.\r\n     * @returns {Object} { ancesstor, a, b, result: (a > b ? 1 : a < b ? -1 : 0) };\r\n     */\r\n    compareElements: function (a, b) {\r\n        let aNode = a, bNode = b;\r\n        while (aNode && bNode && aNode.parentNode !== bNode.parentNode) {\r\n            aNode = aNode.parentNode;\r\n            bNode = bNode.parentNode;\r\n        }\r\n\r\n        if (!aNode || !bNode) return { ancestor: null, a: a, b: b, result: 0 };\r\n\r\n        const children = aNode.parentNode.childNodes;\r\n        const aIndex = this.getArrayIndex(children, aNode);\r\n        const bIndex = this.getArrayIndex(children, bNode);\r\n\r\n        return {\r\n            ancestor: aNode.parentNode,\r\n            a: aNode,\r\n            b: bNode,\r\n            result: aIndex > bIndex ? 1 : aIndex < bIndex ? -1 : 0\r\n        };\r\n    },\r\n\r\n    /**\r\n     * @description Get the parent element of the argument value.\r\n     * A tag that satisfies the query condition is imported.\r\n     * Returns null if not found.\r\n     * @param {Node} element Reference element\r\n     * @param {String|Function} query Query String (nodeName, .className, #ID, :name) or validation function.\r\n     * Not use it like jquery.\r\n     * Only one condition can be entered at a time.\r\n     * @returns {Element|null}\r\n     */\r\n    getParentElement: function (element, query) {\r\n        let check;\r\n\r\n        if (typeof query === 'function') {\r\n            check = query;\r\n        } else {\r\n            let attr;\r\n            if (/^\\./.test(query)) {\r\n                attr = 'className';\r\n                query = query.split('.')[1];\r\n            } else if (/^#/.test(query)) {\r\n                attr = 'id';\r\n                query = '^' + query.split('#')[1] + '$';\r\n            } else if (/^:/.test(query)) {\r\n                attr = 'name';\r\n                query = '^' + query.split(':')[1] + '$';\r\n            } else {\r\n                attr = 'nodeName';\r\n                query = '^' + query + '$';\r\n            }\r\n\r\n            const regExp = new this._w.RegExp(query, 'i');\r\n            check = function (el) {\r\n                return regExp.test(el[attr]);\r\n            };\r\n        }\r\n\r\n        while (element && !check(element)) {\r\n            if (this.isWysiwygDiv(element)) {\r\n                return null;\r\n            }\r\n            element = element.parentNode;\r\n        }\r\n\r\n        return element;\r\n    },\r\n\r\n    /**\r\n     * @description Get the child element of the argument value.\r\n     * A tag that satisfies the query condition is imported.\r\n     * Returns null if not found.\r\n     * @param {Node} element Reference element\r\n     * @param {String|Function} query Query String (nodeName, .className, #ID, :name) or validation function.\r\n     * @param {Boolean} last If true returns the last node among the found child nodes. (default: first node)\r\n     * Not use it like jquery.\r\n     * Only one condition can be entered at a time.\r\n     * @returns {Element|null}\r\n     */\r\n    getChildElement: function (element, query, last) {\r\n        let check;\r\n\r\n        if (typeof query === 'function') {\r\n            check = query;\r\n        } else {\r\n            let attr;\r\n            if (/^\\./.test(query)) {\r\n                attr = 'className';\r\n                query = query.split('.')[1];\r\n            } else if (/^#/.test(query)) {\r\n                attr = 'id';\r\n                query = '^' + query.split('#')[1] + '$';\r\n            } else if (/^:/.test(query)) {\r\n                attr = 'name';\r\n                query = '^' + query.split(':')[1] + '$';\r\n            } else {\r\n                attr = 'nodeName';\r\n                query = '^' + (query === 'text' ? '#' + query : query) + '$';\r\n            }\r\n\r\n            const regExp = new this._w.RegExp(query, 'i');\r\n            check = function (el) {\r\n                return regExp.test(el[attr]);\r\n            };\r\n        }\r\n\r\n        const childList = this.getListChildNodes(element, function (current) {\r\n            return check(current);\r\n        });\r\n\r\n        return childList[last ? childList.length - 1 : 0];\r\n    },\r\n\r\n    /**\r\n     * @description 1. The first node of all the child nodes of the \"first\" element is returned.\r\n     * 2. The last node of all the child nodes of the \"last\" element is returned.\r\n     * 3. When there is no \"last\" element, the first and last nodes of all the children of the \"first\" element are returned.\r\n     * { sc: \"first\", ec: \"last\" }\r\n     * @param {Node} first First element\r\n     * @param {Node|null} last Last element\r\n     * @returns {Object}\r\n     */\r\n    getEdgeChildNodes: function (first, last) {\r\n        if (!first) return;\r\n        if (!last) last = first;\r\n\r\n        while (first && first.nodeType === 1 && first.childNodes.length > 0 && !this.isBreak(first)) first = first.firstChild;\r\n        while (last && last.nodeType === 1 && last.childNodes.length > 0 &&  !this.isBreak(last)) last = last.lastChild;\r\n\r\n        return {\r\n            sc: first,\r\n            ec: last || first\r\n        };\r\n    },\r\n\r\n    /**\r\n     * @description Returns the position of the left and top of argument. {left:0, top:0}\r\n     * @param {Node} element Target node\r\n     * @param {Element|null} wysiwygFrame When use iframe option, iframe object should be sent (context.element.wysiwygFrame)\r\n     * @returns {Object}\r\n     */\r\n    getOffset: function (element, wysiwygFrame) {\r\n        let offsetLeft = 0;\r\n        let offsetTop = 0;\r\n        let offsetElement = element.nodeType === 3 ? element.parentElement : element;\r\n        const wysiwyg = this.getParentElement(element, this.isWysiwygDiv.bind(this));\r\n\r\n        while (offsetElement && !this.hasClass(offsetElement, 'se-container') && offsetElement !== wysiwyg) {\r\n            offsetLeft += offsetElement.offsetLeft;\r\n            offsetTop += offsetElement.offsetTop;\r\n            offsetElement = offsetElement.offsetParent;\r\n        }\r\n\r\n        const iframe = wysiwygFrame && /iframe/i.test(wysiwygFrame.nodeName);\r\n\r\n        return {\r\n            left: offsetLeft + (iframe ? wysiwygFrame.parentElement.offsetLeft : 0),\r\n            top: (offsetTop - (wysiwyg ? wysiwyg.scrollTop : 0)) + (iframe ? wysiwygFrame.parentElement.offsetTop : 0)\r\n        };\r\n    },\r\n\r\n    /**\r\n     * @description It compares the start and end indexes of \"a\" and \"b\" and returns the number of overlapping indexes in the range.\r\n     * ex) 1, 5, 4, 6 => \"2\" (4 ~ 5)\r\n     * @param {Number} aStart Start index of \"a\"\r\n     * @param {Number} aEnd End index of \"a\"\r\n     * @param {Number} bStart Start index of \"b\"\r\n     * @param {Number} bEnd Start index of \"b\"\r\n     * @returns {Number}\r\n     */\r\n    getOverlapRangeAtIndex: function (aStart, aEnd, bStart, bEnd) {\r\n        if (aStart <= bEnd ? aEnd < bStart : aEnd > bStart) return 0;\r\n\r\n        const overlap = (aStart > bStart ? aStart : bStart) - (aEnd < bEnd ? aEnd : bEnd);\r\n        return (overlap < 0 ? overlap * -1 : overlap) + 1;\r\n    },\r\n\r\n    /**\r\n     * @description Set the text content value of the argument value element\r\n     * @param {Node} element Element to replace text content\r\n     * @param {String} txt Text to be applied\r\n     */\r\n    changeTxt: function (element, txt) {\r\n        if (!element || !txt) return;\r\n        element.textContent = txt;\r\n    },\r\n\r\n    /**\r\n     * @description Replace element\r\n     * @param {Element} element Target element\r\n     * @param {String|Element} newElement String or element of the new element to apply\r\n     */\r\n    changeElement: function (element, newElement) {\r\n        if (typeof newElement === 'string') {\r\n            if (element.outerHTML) {\r\n                element.outerHTML = newElement;\r\n            } else {\r\n                const doc = this.createElement('DIV');\r\n                doc.innerHTML = newElement;\r\n                newElement = doc.firstChild;\r\n                element.parentNode.replaceChild(newElement, element);\r\n            }\r\n        } else if (newElement.nodeType === 1) {\r\n            element.parentNode.replaceChild(newElement, element);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * @description Set style, if all styles are deleted, the style properties are deleted.\r\n     * @param {Element} element Element to set style\r\n     * @param {String} styleName Style attribute name (marginLeft, textAlign...)\r\n     * @param {String|Number} value Style value\r\n     */\r\n    setStyle: function (element, styleName, value) {\r\n        element.style[styleName] = value;\r\n\r\n        if (!value && !element.style.cssText) {\r\n            element.removeAttribute('style');\r\n        }\r\n    },\r\n\r\n    /**\r\n     * @description Determine whether any of the matched elements are assigned the given class\r\n     * @param {Element} element Elements to search class name\r\n     * @param {String} className Class name to search for\r\n     * @returns {Boolean}\r\n     */\r\n    hasClass: function (element, className) {\r\n        if (!element) return;\r\n\r\n        return (new this._w.RegExp(className)).test(element.className);\r\n    },\r\n\r\n    /**\r\n     * @description Append the className value of the argument value element\r\n     * @param {Element} element Elements to add class name\r\n     * @param {String} className Class name to be add\r\n     */\r\n    addClass: function (element, className) {\r\n        if (!element) return;\r\n\r\n        const check = new this._w.RegExp('(\\\\s|^)' + className + '(\\\\s|$)');\r\n        if (check.test(element.className)) return;\r\n\r\n        element.className += (element.className.length > 0 ? ' ' : '') + className;\r\n    },\r\n\r\n    /**\r\n     * @description Delete the className value of the argument value element\r\n     * @param {Element} element Elements to remove class name\r\n     * @param {String} className Class name to be remove\r\n     */\r\n    removeClass: function (element, className) {\r\n        if (!element) return;\r\n\r\n        const check = new this._w.RegExp('(\\\\s|^)' + className + '(\\\\s|$)');\r\n        element.className = element.className.replace(check, ' ').trim();\r\n\r\n        if (!element.className.trim()) element.removeAttribute('class');\r\n    },\r\n\r\n    /**\r\n     * @description Argument value If there is no class name, insert it and delete the class name if it exists\r\n     * @param {Element} element Elements to replace class name\r\n     * @param {String} className Class name to be change\r\n     * @returns {Boolean|undefined}\r\n     */\r\n    toggleClass: function (element, className) {\r\n        if (!element) return;\r\n        let result = false;\r\n\r\n        const check = new this._w.RegExp('(\\\\s|^)' + className + '(\\\\s|$)');\r\n        if (check.test(element.className)) {\r\n            element.className = element.className.replace(check, ' ').trim();\r\n        } else {\r\n            element.className += ' ' + className;\r\n            result = true;\r\n        }\r\n\r\n        if (!element.className.trim()) element.removeAttribute('class');\r\n\r\n        return result;\r\n    },\r\n\r\n    /**\r\n     * @description Checks if element can't be easily enabled\r\n     * @param {Element} element Element to check for\r\n     */\r\n    isImportantDisabled: function (element) {\r\n        return element.hasAttribute('data-important-disabled');\r\n    },\r\n\r\n    /**\r\n     * @description In the predefined code view mode, the buttons except the executable button are changed to the 'disabled' state.\r\n     * core.codeViewDisabledButtons (An array of buttons whose class name is not \"se-code-view-enabled\")\r\n     * core.resizingDisabledButtons (An array of buttons whose class name is not \"se-resizing-enabled\")\r\n     * @param {Boolean} disabled Disabled value\r\n     * @param {Array|HTMLCollection|NodeList} buttonList Button array\r\n     * @param {Boolean} important If priveleged mode should be used (Necessary to switch importantDisabled buttons)\r\n     */\r\n    setDisabledButtons: function (disabled, buttonList, important) {\r\n        for (let i = 0, len = buttonList.length; i < len; i++) {\r\n            let button = buttonList[i];\r\n            if (important || !this.isImportantDisabled(button)) button.disabled = disabled;\r\n            if (important) {\r\n                if (disabled) { \r\n                    button.setAttribute('data-important-disabled', '');\r\n                } else {\r\n                    button.removeAttribute('data-important-disabled');\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * @description Delete argumenu value element\r\n     * @param {Node} item Node to be remove\r\n     */\r\n    removeItem: function (item) {\r\n        if (!item) return;\r\n\r\n        if(typeof item.remove === 'function') item.remove();\r\n        else if (item.parentNode) item.parentNode.removeChild(item);\r\n    },\r\n\r\n    /**\r\n     * @description Delete all parent nodes that match the condition.\r\n     * Returns an {sc: previousSibling, ec: nextSibling}(the deleted node reference) or null.\r\n     * @param {Node} item Node to be remove\r\n     * @param {Function|null} validation Validation function. default(Deleted if it only have breakLine and blanks)\r\n     * @param {Element|null} stopParent Stop when the parent node reaches stopParent\r\n     * @returns {Object|null} {sc: previousSibling, ec: nextSibling}\r\n     */\r\n    removeItemAllParents: function (item, validation, stopParent) {\r\n        if (!item) return null;\r\n        let cc = null;\r\n        if (!validation) {\r\n            validation = function (current) {\r\n                if (current === stopParent || this.isComponent(current)) return false;\r\n                const text = current.textContent.trim();\r\n                return text.length === 0 || /^(\\n|\\u200B)+$/.test(text);\r\n            }.bind(this);\r\n        }\r\n\r\n        (function recursionFunc (element) {\r\n            if (!util.isWysiwygDiv(element)) {\r\n                const parent = element.parentNode;\r\n                if (parent && validation(element)) {\r\n                    cc = {\r\n                        sc: element.previousElementSibling,\r\n                        ec: element.nextElementSibling\r\n                    };\r\n                    util.removeItem(element);\r\n                    recursionFunc(parent);\r\n                }\r\n            }\r\n        }(item));\r\n\r\n        return cc;\r\n    },\r\n\r\n    /**\r\n     * @description Detach Nested all nested lists under the \"baseNode\".\r\n     * Returns a list with nested removed.\r\n     * @param {Node} baseNode Element on which to base.\r\n     * @param {Boolean} all If true, it also detach all nested lists of a returned list.\r\n     * @returns {Element}\r\n     */\r\n    detachNestedList: function (baseNode, all) {\r\n        const rNode = this._deleteNestedList(baseNode);\r\n        let rangeElement, cNodes;\r\n\r\n        if (rNode) {\r\n            rangeElement = rNode.cloneNode(false);\r\n            cNodes = rNode.childNodes;\r\n            const index = this.getPositionIndex(baseNode);\r\n            while (cNodes[index]) {\r\n                rangeElement.appendChild(cNodes[index]);\r\n            }\r\n        } else {\r\n            rangeElement = baseNode;\r\n        }\r\n        \r\n        let rChildren;\r\n        if (!all) {\r\n            const depth = this.getElementDepth(baseNode) + 2;\r\n            rChildren = this.getListChildren(baseNode, function (current) { return this.isListCell(current) && !current.previousElementSibling && this.getElementDepth(current) === depth; }.bind(this));\r\n        } else {\r\n            rChildren = this.getListChildren(rangeElement, function (current) { return this.isListCell(current) && !current.previousElementSibling; }.bind(this));\r\n        }\r\n\r\n        for (let i = 0, len = rChildren.length; i < len; i++) {\r\n            this._deleteNestedList(rChildren[i]);\r\n        }\r\n        \r\n        if (rNode) {\r\n            rNode.parentNode.insertBefore(rangeElement, rNode.nextSibling);\r\n            if (cNodes && cNodes.length === 0) this.removeItem(rNode);\r\n        }\r\n\r\n        return rangeElement === baseNode ? rangeElement.parentNode : rangeElement;\r\n    },\r\n\r\n    /**\r\n     * @description Sub function of util.detachNestedList method.\r\n     * @private\r\n     */\r\n    _deleteNestedList: function (baseNode) {\r\n        const baseParent = baseNode.parentNode;\r\n        let sibling = baseParent;\r\n        let parent = sibling.parentNode;\r\n        let liSibling, liParent, child, index, c;\r\n        \r\n        while (this.isListCell(parent)) {\r\n            index = this.getPositionIndex(baseNode);\r\n            liSibling = parent.nextElementSibling;\r\n            liParent = parent.parentNode;\r\n            child = sibling;\r\n            while(child) {\r\n                sibling = sibling.nextSibling;\r\n                if (this.isList(child)) {\r\n                    c = child.childNodes;\r\n                    while (c[index]) {\r\n                        liParent.insertBefore(c[index], liSibling);\r\n                    }\r\n                    if (c.length === 0) this.removeItem(child);\r\n                } else {\r\n                    liParent.appendChild(child);\r\n                }\r\n                child = sibling;\r\n            }\r\n            sibling = liParent;\r\n            parent = liParent.parentNode;\r\n        }\r\n\r\n        if (baseParent.children.length === 0) this.removeItem(baseParent);\r\n\r\n        return liParent;\r\n    },\r\n\r\n    /**\r\n     * @description Split all tags based on \"baseNode\"\r\n     * Returns the last element of the splited tag.\r\n     * @param {Node} baseNode Element or text node on which to base\r\n     * @param {Number|Node|null} offset Text offset of \"baseNode\" (Only valid when \"baseNode\" is a text node)\r\n     * @param {Number} depth The nesting depth of the element being split. (default: 0)\r\n     * @returns {Element}\r\n     */\r\n    splitElement: function (baseNode, offset, depth) {\r\n        if (this.isWysiwygDiv(baseNode)) return baseNode;\r\n\r\n        if (!!offset && !this.isNumber(offset)) {\r\n            const children =  baseNode.childNodes;\r\n            let index = this.getPositionIndex(offset);\r\n            const prev = baseNode.cloneNode(false);\r\n            const next = baseNode.cloneNode(false);\r\n            for (let i = 0, len = children.length; i < len; i++) {\r\n                if (i < index) prev.appendChild(children[i]);\r\n                else if (i > index) next.appendChild(children[i]);\r\n                else continue;\r\n                i--;\r\n                len--;\r\n                index--;\r\n            }\r\n\r\n            if (prev.childNodes.length > 0) baseNode.parentNode.insertBefore(prev, baseNode);\r\n            if (next.childNodes.length > 0) baseNode.parentNode.insertBefore(next, baseNode.nextElementSibling);\r\n\r\n            return baseNode;\r\n        }\r\n\r\n        const bp = baseNode.parentNode;\r\n        let index = 0, newEl, children, temp;\r\n        let next = true;\r\n        if (!depth || depth < 0) depth = 0;\r\n\r\n        if (baseNode.nodeType === 3) {\r\n            index = this.getPositionIndex(baseNode);\r\n            if (offset >= 0) {\r\n                baseNode.splitText(offset);\r\n                const after = this.getNodeFromPath([index + 1], bp);\r\n                if (this.onlyZeroWidthSpace(after)) after.data = this.zeroWidthSpace;\r\n            }\r\n        } else if (baseNode.nodeType === 1) {\r\n            if (!baseNode.previousSibling) {\r\n                if (this.getElementDepth(baseNode) === depth) next = false;\r\n            } else {\r\n                baseNode = baseNode.previousSibling;\r\n            }\r\n        }\r\n\r\n        let depthEl = baseNode;\r\n        while (this.getElementDepth(depthEl) > depth) {\r\n            index = this.getPositionIndex(depthEl) + 1;\r\n            depthEl = depthEl.parentNode;\r\n\r\n            temp = newEl;\r\n            newEl = depthEl.cloneNode(false);\r\n            children = depthEl.childNodes;\r\n\r\n            if (temp) {\r\n                if (this.isListCell(newEl) && this.isList(temp) && temp.firstElementChild) {\r\n                    newEl.innerHTML = temp.firstElementChild.innerHTML;\r\n                    util.removeItem(temp.firstElementChild);\r\n                    if (temp.children.length > 0) newEl.appendChild(temp);\r\n                } else {\r\n                    newEl.appendChild(temp);\r\n                }\r\n            }\r\n\r\n            while (children[index]) {\r\n                newEl.appendChild(children[index]);\r\n            }\r\n        }\r\n\r\n        if (depthEl.childNodes.length <= 1 && (!depthEl.firstChild || depthEl.firstChild.textContent.length === 0)) depthEl.innerHTML = '<br>';\r\n\r\n        const pElement = depthEl.parentNode;\r\n        if (next) depthEl = depthEl.nextSibling;\r\n        if (!newEl) return depthEl;\r\n\r\n        this.mergeSameTags(newEl, null, false);\r\n        this.mergeNestedTags(newEl, function (current) { return this.isList(current); }.bind(this));\r\n        \r\n        if (newEl.childNodes.length > 0) pElement.insertBefore(newEl, depthEl);\r\n        else newEl = depthEl;\r\n\r\n        if (bp.childNodes.length === 0) this.removeItem(bp);\r\n\r\n        return newEl;\r\n    },\r\n\r\n    /**\r\n     * @description Use with \"npdePath (util.getNodePath)\" to merge the same attributes and tags if they are present and modify the nodepath.\r\n     * If \"offset\" has been changed, it will return as much \"offset\" as it has been modified.\r\n     * An array containing change offsets is returned in the order of the \"nodePathArray\" array.\r\n     * @param {Element} element Element\r\n     * @param {Array|null} nodePathArray Array of NodePath object ([util.getNodePath(), ..])\r\n     * @param {Boolean} onlyText If true, non-text nodes(!util._isIgnoreNodeChange) like 'span', 'strong'.. are ignored.\r\n     * @returns {Array} [offset, ..]\r\n     */\r\n    mergeSameTags: function (element, nodePathArray, onlyText) {\r\n        const inst = this;\r\n        const nodePathLen = nodePathArray ? nodePathArray.length : 0;\r\n        let offsets = null;\r\n        \r\n        if (nodePathLen) {\r\n            offsets = this._w.Array.apply(null, new this._w.Array(nodePathLen)).map(this._w.Number.prototype.valueOf, 0);\r\n        }\r\n\r\n        (function recursionFunc(current, depth, depthIndex) {\r\n            const children = current.childNodes;\r\n            \r\n            for (let i = 0, len = children.length, child, next; i < len; i++) {\r\n                child = children[i];\r\n                next = children[i + 1];\r\n                if (!child) break;\r\n                if((onlyText && inst._isIgnoreNodeChange(child)) || (!onlyText && (inst.isTable(child) || inst.isListCell(child) || (inst.isFormatElement(child) && !inst.isFreeFormatElement(child))))) {\r\n                    if (inst.isTable(child) || inst.isListCell(child)) {\r\n                        recursionFunc(child, depth + 1, i);\r\n                    }\r\n                    continue;\r\n                }\r\n                if (len === 1 && current.nodeName === child.nodeName && current.parentNode) {\r\n                    // update nodePath\r\n                    if (nodePathLen) {\r\n                        let path, c, p, cDepth, spliceDepth;\r\n                        for (let n = 0; n < nodePathLen; n++) {\r\n                            path = nodePathArray[n];\r\n                            if (path && path[depth] === i) {\r\n                                c = child, p = current, cDepth = depth, spliceDepth = true;\r\n                                while (cDepth >= 0) {\r\n                                    if (inst.getArrayIndex(p.childNodes, c) !== path[cDepth]) {\r\n                                        spliceDepth = false;\r\n                                        break;\r\n                                    }\r\n                                    c = child.parentNode;\r\n                                    p = c.parentNode;\r\n                                    cDepth--;\r\n                                }\r\n                                if (spliceDepth) {\r\n                                    path.splice(depth, 1);\r\n                                    path[depth] = i;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // merge tag\r\n                    inst.copyTagAttributes(child, current);\r\n                    current.parentNode.insertBefore(child, current);\r\n                    inst.removeItem(current);\r\n                }\r\n                if (!next) {\r\n                    if (child.nodeType === 1) recursionFunc(child, depth + 1, i);\r\n                    break;\r\n                }\r\n\r\n                if (child.nodeName === next.nodeName && inst.isSameAttributes(child, next) && child.href === next.href) {\r\n                    const childs = child.childNodes;\r\n                    let childLength = 0;\r\n                    for (let n = 0, nLen = childs.length; n < nLen; n++) {\r\n                        if (childs[n].textContent.length > 0) childLength++;\r\n                    }\r\n\r\n                    const l = child.lastChild;\r\n                    const r = next.firstChild;\r\n                    let addOffset = 0;\r\n                    if (l && r) {\r\n                        const textOffset = l.nodeType === 3 && r.nodeType === 3;\r\n                        addOffset = l.textContent.length;\r\n                        let tempL = l.previousSibling;\r\n                        while(tempL && tempL.nodeType === 3) {\r\n                            addOffset += tempL.textContent.length;\r\n                            tempL = tempL.previousSibling;\r\n                        }\r\n\r\n                        if (childLength > 0 && l.nodeType === 3 && r.nodeType === 3 && (l.textContent.length > 0 || r.textContent.length > 0)) childLength--;\r\n\r\n                        if (nodePathLen) {\r\n                            let path = null;\r\n                            for (let n = 0; n < nodePathLen; n++) {\r\n                                path = nodePathArray[n];\r\n                                if (path && path[depth] > i) {\r\n                                    if (depth > 0 && path[depth - 1] !== depthIndex) continue;\r\n    \r\n                                    path[depth] -= 1;\r\n                                    if (path[depth + 1] >= 0 && path[depth] === i) {\r\n                                        path[depth + 1] += childLength;\r\n                                        if (textOffset) {\r\n                                            if (l && l.nodeType === 3 && r && r.nodeType === 3) {\r\n                                                offsets[n] += addOffset;\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (child.nodeType === 3) {\r\n                        addOffset = child.textContent.length;\r\n                        child.textContent += next.textContent;\r\n                        if (nodePathLen) {\r\n                            let path = null;\r\n                            for (let n = 0; n < nodePathLen; n++) {\r\n                                path = nodePathArray[n];\r\n                                if (path && path[depth] > i) {\r\n                                    if (depth > 0 && path[depth - 1] !== depthIndex) continue;\r\n    \r\n                                    path[depth] -= 1;\r\n                                    if (path[depth + 1] >= 0 && path[depth] === i) {\r\n                                        path[depth + 1] += childLength;\r\n                                        offsets[n] += addOffset;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        child.innerHTML += next.innerHTML;\r\n                    }\r\n                    \r\n                    inst.removeItem(next);\r\n                    i--;\r\n                } else if (child.nodeType === 1) {\r\n                    recursionFunc(child, depth + 1, i);\r\n                }\r\n            }\r\n        })(element, 0, 0);\r\n\r\n        return offsets;\r\n    },\r\n\r\n    /**\r\n     * @description Remove nested tags without other child nodes.\r\n     * @param {Element} element Element object\r\n     * @param {Function|String|null} validation Validation function / String(\"tag1|tag2..\") / If null, all tags are applicable.\r\n     */\r\n    mergeNestedTags: function (element, validation) {\r\n        if (typeof validation === 'string') {\r\n            validation = function (current) { return this.test(current.tagName); }.bind(new this._w.RegExp('^(' + (validation ? validation : '.+') + ')$', 'i'));\r\n        } else if (typeof validation !== 'function') {\r\n            validation = function () { return true; };\r\n        }\r\n        \r\n        (function recursionFunc(current) {\r\n            let children = current.children;\r\n            if (children.length === 1 && children[0].nodeName === current.nodeName && validation(current)) {\r\n                const temp = children[0];\r\n                children = temp.children;\r\n                while (children[0]) {\r\n                    current.appendChild(children[0]);\r\n                }\r\n                current.removeChild(temp);\r\n            }\r\n\r\n            for (let i = 0, len = current.children.length; i < len; i++) {\r\n                recursionFunc(current.children[i]);\r\n            }\r\n        })(element);\r\n    },\r\n\r\n    /**\r\n     * @description Delete a empty child node of argument element\r\n     * @param {Element} element Element node\r\n     * @param {Node|null} notRemoveNode Do not remove node\r\n     */\r\n    removeEmptyNode: function (element, notRemoveNode) {\r\n        const inst = this;\r\n\r\n        if (notRemoveNode) {\r\n            notRemoveNode = inst.getParentElement(notRemoveNode, function (current) {\r\n                return element === current.parentElement;\r\n            });\r\n        }\r\n        \r\n        (function recursionFunc(current) {\r\n            if (inst._notTextNode(current) || current === notRemoveNode || inst.isNonEditable(current)) return 0;\r\n            if (current !== element && inst.onlyZeroWidthSpace(current.textContent) && (!current.firstChild || !inst.isBreak(current.firstChild)) && !current.querySelector(inst._allowedEmptyNodeList)) {\r\n                if (current.parentNode) {\r\n                    current.parentNode.removeChild(current);\r\n                    return -1;\r\n                }\r\n            } else {\r\n                const children = current.children;\r\n                for (let i = 0, len = children.length, r = 0; i < len; i++) {\r\n                    if (!children[i + r] || inst.isComponent(children[i + r])) continue;\r\n                    r += recursionFunc(children[i + r]);\r\n                }\r\n            }\r\n\r\n            return 0;\r\n        })(element);\r\n\r\n        if (element.childNodes.length === 0) element.innerHTML = '<br>';\r\n    },\r\n\r\n    /**\r\n     * @description Remove whitespace between tags in HTML string.\r\n     * @param {String} html HTML string\r\n     * @returns {String}\r\n     */\r\n    htmlRemoveWhiteSpace: function (html) {\r\n        if (!html) return '';\r\n        return html.trim().replace(/<\\/?(?!strong|span|font|b|var|i|em|u|ins|s|strike|del|sub|sup|mark|a|label|code|summary)[^>^<]+>\\s+(?=<)/ig, function (m) { return m.replace(/\\n/g, '').replace(/\\s+/, ' '); });\r\n    },\r\n\r\n    /**\r\n     * @description Sort a element array by depth of element.\r\n     * @param {Array} array Array object\r\n     * @param {Boolean} des true: descending order / false: ascending order\r\n     */\r\n    sortByDepth: function (array, des) {\r\n        const t = !des ? -1 : 1;\r\n        const f = t * -1;\r\n\r\n        array.sort(function (a, b) {\r\n            if (!this.isListCell(a) || !this.isListCell(b)) return 0;\r\n            a = this.getElementDepth(a);\r\n            b = this.getElementDepth(b);\r\n            return a > b ? t : a < b ? f : 0;\r\n        }.bind(this));\r\n    },\r\n\r\n    /**\r\n     * @description Nodes that need to be added without modification when changing text nodes\r\n     * @param {Node} element Element to check\r\n     * @returns {Boolean}\r\n     * @private\r\n     */\r\n    _isIgnoreNodeChange: function (element) {\r\n        return element && element.nodeType !== 3 && (this.isNonEditable(element) || !this.isTextStyleElement(element));\r\n    },\r\n\r\n    /**\r\n     * @description Nodes that must remain undetached when changing text nodes (A, Label, Code, Span:font-size)\r\n     * @param {Node|String} element Element to check\r\n     * @returns {Boolean}\r\n     * @private\r\n     */\r\n    _isMaintainedNode: function (element) {\r\n        return element && element.nodeType !== 3 && /^(a|label|code|summary)$/i.test(typeof element === 'string' ? element : element.nodeName);\r\n    },\r\n\r\n    /**\r\n     * @description Node with font-size style\r\n     * @param {Node} element Element to check\r\n     * @returns {Boolean}\r\n     * @private\r\n     */\r\n    _isSizeNode: function (element) {\r\n        return element && element.nodeType !== 3 && this.isTextStyleElement(element) && !!element.style.fontSize;\r\n    },\r\n\r\n    /**\r\n     * @description Nodes without text\r\n     * @param {Node} element Element to check\r\n     * @returns {Boolean}\r\n     * @private\r\n     */\r\n    _notTextNode: function (element) {\r\n        return element && element.nodeType !== 3 && (this.isComponent(element) || /^(br|input|select|canvas|img|iframe|audio|video)$/i.test(typeof element === 'string' ? element : element.nodeName));\r\n    },\r\n\r\n    /**\r\n     * @description Check disallowed tags\r\n     * @param {Node} element Element to check\r\n     * @returns {Boolean}\r\n     * @private\r\n     */\r\n    _disallowedTags: function (element) {\r\n        return /^(meta|script|link|style|[a-z]+\\:[a-z]+)$/i.test(element.nodeName);\r\n    },\r\n\r\n    /**\r\n     * @description Create whitelist RegExp object.\r\n     * Return RegExp format: new RegExp(\"<\\\\/?\\\\b(?!\" + list + \")\\\\b[^>^<]*+>\", \"gi\")\r\n     * @param {String} list Tags list (\"br|p|div|pre...\")\r\n     * @returns {RegExp}\r\n     */\r\n    createTagsWhitelist: function (list) {\r\n        return new RegExp('<\\\\/?\\\\b(?!\\\\b' + (list || '').replace(/\\|/g, '\\\\b|\\\\b') + '\\\\b)[^>]*>', 'gi');\r\n    },\r\n\r\n    /**\r\n     * @description Create blacklist RegExp object.\r\n     * Return RegExp format: new RegExp(\"<\\\\/?\\\\b(?:\" + list + \")\\\\b[^>^<]*+>\", \"gi\")\r\n     * @param {String} list Tags list (\"br|p|div|pre...\")\r\n     * @returns {RegExp}\r\n     */\r\n    createTagsBlacklist: function (list) {\r\n        return new RegExp('<\\\\/?\\\\b(?:\\\\b' + (list || '^').replace(/\\|/g, '\\\\b|\\\\b') + '\\\\b)[^>]*>', 'gi');\r\n    },\r\n\r\n    /**\r\n     * @description Fix tags that do not fit the editor format.\r\n     * @param {Element} documentFragment Document fragment \"DOCUMENT_FRAGMENT_NODE\" (nodeType === 11)\r\n     * @param {RegExp} htmlCheckWhitelistRegExp Editor tags whitelist (core._htmlCheckWhitelistRegExp)\r\n     * @param {RegExp} htmlCheckBlacklistRegExp Editor tags blacklist (core._htmlCheckBlacklistRegExp)\r\n     * @param {Boolean} lowLevelCheck Row level check\r\n     * @private\r\n     */\r\n    _consistencyCheckOfHTML: function (documentFragment, htmlCheckWhitelistRegExp, htmlCheckBlacklistRegExp, lowLevelCheck) {\r\n        /**\r\n         * It is can use \".children(util.getListChildren)\" to exclude text nodes, but \"documentFragment.children\" is not supported in IE.\r\n         * So check the node type and exclude the text no (current.nodeType !== 1)\r\n         */\r\n        const removeTags = [], emptyTags = [], wrongList = [], withoutFormatCells = [];\r\n\r\n        // wrong position\r\n        const wrongTags = this.getListChildNodes(documentFragment, function (current) {\r\n            if (current.nodeType !== 1) {\r\n                if (this.isList(current.parentElement)) removeTags.push(current);\r\n                return false;\r\n            }\r\n\r\n            // white list\r\n            if (htmlCheckBlacklistRegExp.test(current.nodeName) || (!htmlCheckWhitelistRegExp.test(current.nodeName) && current.childNodes.length === 0 && this.isNotCheckingNode(current))) {\r\n                removeTags.push(current);\r\n                return false;\r\n            }\r\n\r\n            const nrtag = !this.getParentElement(current, this.isNotCheckingNode);\r\n            // empty tags\r\n            if ((!this.isTable(current) && !this.isListCell(current) && !this.isAnchor(current)) && (this.isFormatElement(current) || this.isRangeFormatElement(current) || this.isTextStyleElement(current)) && current.childNodes.length === 0 && nrtag) {\r\n                emptyTags.push(current);\r\n                return false;\r\n            }\r\n\r\n            // wrong list\r\n            if (this.isList(current.parentNode) && !this.isList(current) && !this.isListCell(current)) {\r\n                wrongList.push(current);\r\n                return false;\r\n            }\r\n\r\n            // table cells\r\n            if (this.isCell(current)) {\r\n                const fel = current.firstElementChild;\r\n                if (!this.isFormatElement(fel) && !this.isRangeFormatElement(fel) && !this.isComponent(fel)) {\r\n                    withoutFormatCells.push(current);\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            const result = current.parentNode !== documentFragment && nrtag &&\r\n             ((this.isListCell(current) && !this.isList(current.parentNode)) ||\r\n              (lowLevelCheck && (this.isFormatElement(current) || this.isComponent(current)) && !this.isRangeFormatElement(current.parentNode) && !this.getParentElement(current, this.isComponent)));\r\n\r\n            return result;\r\n        }.bind(this));\r\n\r\n        for (let i = 0, len = removeTags.length; i < len; i++) {\r\n            this.removeItem(removeTags[i]);\r\n        }\r\n        \r\n        const checkTags = [];\r\n        for (let i = 0, len = wrongTags.length, t, p; i < len; i++) {\r\n            t = wrongTags[i];\r\n            p = t.parentNode;\r\n            if (!p || !p.parentNode) continue;\r\n\r\n            if (this.getParentElement(t, this.isListCell)) {\r\n                const cellChildren = t.childNodes;\r\n                for (let j = cellChildren.length - 1; len >= 0; j--) {\r\n                    p.insertBefore(t, cellChildren[j]);\r\n                }\r\n                checkTags.push(t);\r\n            } else {\r\n                p.parentNode.insertBefore(t, p);\r\n                checkTags.push(p);\r\n            }\r\n        }\r\n\r\n        for (let i = 0, len = checkTags.length, t; i < len; i++) {\r\n            t = checkTags[i];\r\n            if (this.onlyZeroWidthSpace(t.textContent.trim())) {\r\n                this.removeItem(t);\r\n            }\r\n        }\r\n\r\n        for (let i = 0, len = emptyTags.length; i < len; i++) {\r\n            this.removeItem(emptyTags[i]);\r\n        }\r\n\r\n        for (let i = 0, len = wrongList.length, t, tp, children, p; i < len; i++) {\r\n            t = wrongList[i];\r\n            p = t.parentNode;\r\n            if (!p) continue;\r\n\r\n            tp = this.createElement('LI');\r\n\r\n            if (this.isFormatElement(t)) {\r\n                children = t.childNodes;\r\n                while (children[0]) {\r\n                    tp.appendChild(children[0]);\r\n                }\r\n                p.insertBefore(tp, t);\r\n                this.removeItem(t);\r\n            } else {\r\n                t = t.nextSibling;\r\n                tp.appendChild(wrongList[i]);\r\n                p.insertBefore(tp, t);\r\n            }\r\n        }\r\n\r\n        for (let i = 0, len = withoutFormatCells.length, t, f; i < len; i++) {\r\n            t = withoutFormatCells[i];\r\n            f = this.createElement('DIV');\r\n            f.innerHTML = (t.textContent.trim().length === 0 && t.children.length === 0) ? '<br>' : t.innerHTML;\r\n            t.innerHTML = f.outerHTML;\r\n        }\r\n    },\r\n\r\n    _setDefaultOptionStyle: function (options, defaultStyle) {\r\n        let optionStyle = '';\r\n        if (options.height) optionStyle += 'height:' + options.height + ';';\r\n        if (options.minHeight) optionStyle += 'min-height:' + options.minHeight + ';';\r\n        if (options.maxHeight) optionStyle += 'max-height:' + options.maxHeight + ';';\r\n        if (options.position) optionStyle += 'position:' + options.position + ';';\r\n        if (options.width) optionStyle += 'width:' + options.width + ';';\r\n        if (options.minWidth) optionStyle += 'min-width:' + options.minWidth + ';';\r\n        if (options.maxWidth) optionStyle += 'max-width:' + options.maxWidth + ';';\r\n\r\n        let top = '', frame = '', editor = '';\r\n        defaultStyle = optionStyle + defaultStyle;\r\n        const styleArr = defaultStyle.split(';');\r\n        for (let i = 0, len = styleArr.length, s; i < len; i++) {\r\n            s = styleArr[i].trim();\r\n            if (!s) continue;\r\n            if (/^(min-|max-)?width\\s*:/.test(s) || /^(z-index|position)\\s*:/.test(s)) {\r\n                top += s + ';';\r\n                continue;\r\n            }\r\n            if (/^(min-|max-)?height\\s*:/.test(s)) {\r\n                if (/^height/.test(s) && s.split(':')[1].trim() === 'auto') {\r\n                    options.height = 'auto';\r\n                }\r\n                frame += s + ';';\r\n                continue;\r\n            }\r\n            editor += s + ';';\r\n        }\r\n\r\n        return {\r\n            top: top,\r\n            frame: frame,\r\n            editor: editor\r\n        };\r\n    },\r\n\r\n    _setIframeDocument: function (frame, options) {\r\n        frame.setAttribute('scrolling', 'auto');\r\n        frame.contentDocument.head.innerHTML = '' +\r\n            '<meta charset=\"utf-8\" />' +\r\n            '<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">' +\r\n            this._setIframeCssTags(options);\r\n        frame.contentDocument.body.className = options._editableClass;\r\n        frame.contentDocument.body.setAttribute('contenteditable', true);\r\n    },\r\n\r\n    _setIframeCssTags: function (options) {\r\n        const linkNames = options.iframeCSSFileName;\r\n        const wRegExp = this._w.RegExp;\r\n        let tagString = '';\r\n\r\n        for (let f = 0, len = linkNames.length, path; f < len; f++) {\r\n            path = [];\r\n\r\n            if (/(^https?:\\/\\/)|(^data:text\\/css,)/.test(linkNames[f])) {\r\n                path.push(linkNames[f]);\r\n            } else {\r\n                const CSSFileName = new wRegExp('(^|.*[\\\\/])' + linkNames[f] + '(\\\\..+)?\\\\.css(?:\\\\?.*|;.*)?$', 'i');\r\n                for (let c = document.getElementsByTagName('link'), i = 0, len = c.length, styleTag; i < len; i++) {\r\n                    styleTag = c[i].href.match(CSSFileName);\r\n                    if (styleTag) path.push(styleTag[0]);\r\n                }\r\n            }\r\n\r\n            if (!path || path.length === 0) throw '[SUNEDITOR.constructor.iframe.fail] The suneditor CSS files installation path could not be automatically detected. Please set the option property \"iframeCSSFileName\" before creating editor instances.';\r\n\r\n            for (let i = 0, len = path.length; i < len; i++) {\r\n                tagString += '<link href=\"' + path[i] + '\" rel=\"stylesheet\">';\r\n            }\r\n        }\r\n\r\n        return tagString + (options.height === 'auto' ? '<style>\\n/** Iframe height auto */\\nbody{height: min-content; overflow: hidden;}\\n</style>' : '');\r\n    }\r\n};\r\n\r\nexport default util;"],"mappings":"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"},"metadata":{},"sourceType":"module"}