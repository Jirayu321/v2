{"ast":null,"code":"/** These methods may break the react binding if called directly */\nconst skipMethods = ['setMaxBounds', 'setMinZoom', 'setMaxZoom', 'setMinPitch', 'setMaxPitch', 'setRenderWorldCopies', 'setProjection', 'setStyle', 'addSource', 'removeSource', 'addLayer', 'removeLayer', 'setLayerZoomRange', 'setFilter', 'setPaintProperty', 'setLayoutProperty', 'setLight', 'setTerrain', 'setFog', 'remove'];\nexport default function createRef(mapInstance, mapLib) {\n  if (!mapInstance) {\n    return null;\n  }\n\n  const map = mapInstance.map;\n  const result = {\n    getMap: () => map,\n    // Overwrite getters to use our shadow transform\n    getCenter: () => mapInstance.transform.center,\n    getZoom: () => mapInstance.transform.zoom,\n    getBearing: () => mapInstance.transform.bearing,\n    getPitch: () => mapInstance.transform.pitch,\n    getPadding: () => mapInstance.transform.padding,\n    getBounds: () => mapInstance.transform.getBounds(),\n    project: lnglat => {\n      return mapInstance.transform.locationPoint(mapLib.LngLat.convert(lnglat));\n    },\n    unproject: point => {\n      return mapInstance.transform.pointLocation(mapLib.Point.convert(point));\n    },\n    queryTerrainElevation: (lnglat, options) => {\n      // @ts-ignore transform not defined\n      const tr = map.transform; // @ts-ignore transform not defined\n\n      map.transform = mapInstance.transform;\n      const result = map.queryTerrainElevation(lnglat, options); // @ts-ignore transform not defined\n\n      map.transform = tr;\n      return result;\n    }\n  };\n\n  for (const key of getMethodNames(map)) {\n    // @ts-expect-error\n    if (!(key in result) && !skipMethods.includes(key)) {\n      result[key] = map[key].bind(map);\n    }\n  }\n\n  return result;\n}\n\nfunction getMethodNames(obj) {\n  const result = new Set();\n  let proto = obj;\n\n  while (proto) {\n    for (const key of Object.getOwnPropertyNames(proto)) {\n      if (key[0] !== '_' && typeof obj[key] === 'function' && key !== 'fire' && key !== 'setEventedParent') {\n        result.add(key);\n      }\n    }\n\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return Array.from(result);\n}","map":{"version":3,"sources":["../../../src/mapbox/create-ref.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/** These methods may break the react binding if called directly */\nconst skipMethods = [\n    'setMaxBounds',\n    'setMinZoom',\n    'setMaxZoom',\n    'setMinPitch',\n    'setMaxPitch',\n    'setRenderWorldCopies',\n    'setProjection',\n    'setStyle',\n    'addSource',\n    'removeSource',\n    'addLayer',\n    'removeLayer',\n    'setLayerZoomRange',\n    'setFilter',\n    'setPaintProperty',\n    'setLayoutProperty',\n    'setLight',\n    'setTerrain',\n    'setFog',\n    'remove'\n];\nexport default function createRef(mapInstance, mapLib) {\n    if (!mapInstance) {\n        return null;\n    }\n    const map = mapInstance.map;\n    const result = {\n        getMap: () => map,\n        // Overwrite getters to use our shadow transform\n        getCenter: () => mapInstance.transform.center,\n        getZoom: () => mapInstance.transform.zoom,\n        getBearing: () => mapInstance.transform.bearing,\n        getPitch: () => mapInstance.transform.pitch,\n        getPadding: () => mapInstance.transform.padding,\n        getBounds: () => mapInstance.transform.getBounds(),\n        project: (lnglat) => {\n            return mapInstance.transform.locationPoint(mapLib.LngLat.convert(lnglat));\n        },\n        unproject: (point) => {\n            return mapInstance.transform.pointLocation(mapLib.Point.convert(point));\n        },\n        queryTerrainElevation: (lnglat, options) => {\n            // @ts-ignore transform not defined\n            const tr = map.transform;\n            // @ts-ignore transform not defined\n            map.transform = mapInstance.transform;\n            const result = map.queryTerrainElevation(lnglat, options);\n            // @ts-ignore transform not defined\n            map.transform = tr;\n            return result;\n        }\n    };\n    for (const key of getMethodNames(map)) {\n        // @ts-expect-error\n        if (!(key in result) && !skipMethods.includes(key)) {\n            result[key] = map[key].bind(map);\n        }\n    }\n    return result;\n}\nfunction getMethodNames(obj) {\n    const result = new Set();\n    let proto = obj;\n    while (proto) {\n        for (const key of Object.getOwnPropertyNames(proto)) {\n            if (key[0] !== '_' &&\n                typeof obj[key] === 'function' &&\n                key !== 'fire' &&\n                key !== 'setEventedParent') {\n                result.add(key);\n            }\n        }\n        proto = Object.getPrototypeOf(proto);\n    }\n    return Array.from(result);\n}\n//# sourceMappingURL=create-ref.js.map"]},"metadata":{},"sourceType":"module"}