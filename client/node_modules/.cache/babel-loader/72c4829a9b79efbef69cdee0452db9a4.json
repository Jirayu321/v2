{"ast":null,"code":"/**\n * Make a copy of a transform\n * @param tr\n */\nexport function cloneTransform(tr) {\n  const newTransform = tr.clone(); // Work around mapbox bug - this value is not assigned in clone(), only in resize()\n\n  newTransform.pixelsToGLUnits = tr.pixelsToGLUnits;\n  return newTransform;\n}\n/**\n * Capture a transform's current state\n * @param transform\n * @returns descriptor of the view state\n */\n\nexport function transformToViewState(tr) {\n  return {\n    longitude: tr.center.lng,\n    latitude: tr.center.lat,\n    zoom: tr.zoom,\n    pitch: tr.pitch,\n    bearing: tr.bearing,\n    padding: tr.padding\n  };\n}\n/* eslint-disable complexity */\n\n/**\n * Mutate a transform to match the given view state\n * @param transform\n * @param viewState\n * @returns true if the transform has changed\n */\n\nexport function applyViewStateToTransform(tr, props) {\n  const v = props.viewState || props;\n  let changed = false;\n\n  if ('longitude' in v && 'latitude' in v) {\n    const center = tr.center; // @ts-ignore\n\n    tr.center = new center.constructor(v.longitude, v.latitude);\n    changed = changed || center !== tr.center;\n  }\n\n  if ('zoom' in v) {\n    const zoom = tr.zoom;\n    tr.zoom = v.zoom;\n    changed = changed || zoom !== tr.zoom;\n  }\n\n  if ('bearing' in v) {\n    const bearing = tr.bearing;\n    tr.bearing = v.bearing;\n    changed = changed || bearing !== tr.bearing;\n  }\n\n  if ('pitch' in v) {\n    const pitch = tr.pitch;\n    tr.pitch = v.pitch;\n    changed = changed || pitch !== tr.pitch;\n  }\n\n  if (v.padding && !tr.isPaddingEqual(v.padding)) {\n    changed = true;\n    tr.padding = v.padding;\n  }\n\n  return changed;\n}","map":{"version":3,"sources":["../../../src/utils/transform.ts"],"names":[],"mappings":"AAGA;;;AAGG;AACH,OAAM,SAAU,cAAV,CAAyB,EAAzB,EAAsC;EAC1C,MAAM,YAAY,GAAG,EAAE,CAAC,KAAH,EAArB,CAD0C,CAE1C;;EACA,YAAY,CAAC,eAAb,GAA+B,EAAE,CAAC,eAAlC;EACA,OAAO,YAAP;AACD;AAED;;;;AAIG;;AACH,OAAM,SAAU,oBAAV,CAA+B,EAA/B,EAA4C;EAChD,OAAO;IACL,SAAS,EAAE,EAAE,CAAC,MAAH,CAAU,GADhB;IAEL,QAAQ,EAAE,EAAE,CAAC,MAAH,CAAU,GAFf;IAGL,IAAI,EAAE,EAAE,CAAC,IAHJ;IAIL,KAAK,EAAE,EAAE,CAAC,KAJL;IAKL,OAAO,EAAE,EAAE,CAAC,OALP;IAML,OAAO,EAAE,EAAE,CAAC;EANP,CAAP;AAQD;AAED;;AACA;;;;;AAKG;;AACH,OAAM,SAAU,yBAAV,CAAoC,EAApC,EAAmD,KAAnD,EAAqE;EACzE,MAAM,CAAC,GAAuB,KAAK,CAAC,SAAN,IAAmB,KAAjD;EACA,IAAI,OAAO,GAAG,KAAd;;EAEA,IAAI,eAAe,CAAf,IAAoB,cAAc,CAAtC,EAAyC;IACvC,MAAM,MAAM,GAAG,EAAE,CAAC,MAAlB,CADuC,CAEvC;;IACA,EAAE,CAAC,MAAH,GAAY,IAAI,MAAM,CAAC,WAAX,CAAuB,CAAC,CAAC,SAAzB,EAAoC,CAAC,CAAC,QAAtC,CAAZ;IACA,OAAO,GAAG,OAAO,IAAI,MAAM,KAAK,EAAE,CAAC,MAAnC;EACD;;EACD,IAAI,UAAU,CAAd,EAAiB;IACf,MAAM,IAAI,GAAG,EAAE,CAAC,IAAhB;IACA,EAAE,CAAC,IAAH,GAAU,CAAC,CAAC,IAAZ;IACA,OAAO,GAAG,OAAO,IAAI,IAAI,KAAK,EAAE,CAAC,IAAjC;EACD;;EACD,IAAI,aAAa,CAAjB,EAAoB;IAClB,MAAM,OAAO,GAAG,EAAE,CAAC,OAAnB;IACA,EAAE,CAAC,OAAH,GAAa,CAAC,CAAC,OAAf;IACA,OAAO,GAAG,OAAO,IAAI,OAAO,KAAK,EAAE,CAAC,OAApC;EACD;;EACD,IAAI,WAAW,CAAf,EAAkB;IAChB,MAAM,KAAK,GAAG,EAAE,CAAC,KAAjB;IACA,EAAE,CAAC,KAAH,GAAW,CAAC,CAAC,KAAb;IACA,OAAO,GAAG,OAAO,IAAI,KAAK,KAAK,EAAE,CAAC,KAAlC;EACD;;EACD,IAAI,CAAC,CAAC,OAAF,IAAa,CAAC,EAAE,CAAC,cAAH,CAAkB,CAAC,CAAC,OAApB,CAAlB,EAAgD;IAC9C,OAAO,GAAG,IAAV;IACA,EAAE,CAAC,OAAH,GAAa,CAAC,CAAC,OAAf;EACD;;EACD,OAAO,OAAP;AACD","sourceRoot":"","sourcesContent":["/**\n * Make a copy of a transform\n * @param tr\n */\nexport function cloneTransform(tr) {\n    const newTransform = tr.clone();\n    // Work around mapbox bug - this value is not assigned in clone(), only in resize()\n    newTransform.pixelsToGLUnits = tr.pixelsToGLUnits;\n    return newTransform;\n}\n/**\n * Capture a transform's current state\n * @param transform\n * @returns descriptor of the view state\n */\nexport function transformToViewState(tr) {\n    return {\n        longitude: tr.center.lng,\n        latitude: tr.center.lat,\n        zoom: tr.zoom,\n        pitch: tr.pitch,\n        bearing: tr.bearing,\n        padding: tr.padding\n    };\n}\n/* eslint-disable complexity */\n/**\n * Mutate a transform to match the given view state\n * @param transform\n * @param viewState\n * @returns true if the transform has changed\n */\nexport function applyViewStateToTransform(tr, props) {\n    const v = props.viewState || props;\n    let changed = false;\n    if ('longitude' in v && 'latitude' in v) {\n        const center = tr.center;\n        // @ts-ignore\n        tr.center = new center.constructor(v.longitude, v.latitude);\n        changed = changed || center !== tr.center;\n    }\n    if ('zoom' in v) {\n        const zoom = tr.zoom;\n        tr.zoom = v.zoom;\n        changed = changed || zoom !== tr.zoom;\n    }\n    if ('bearing' in v) {\n        const bearing = tr.bearing;\n        tr.bearing = v.bearing;\n        changed = changed || bearing !== tr.bearing;\n    }\n    if ('pitch' in v) {\n        const pitch = tr.pitch;\n        tr.pitch = v.pitch;\n        changed = changed || pitch !== tr.pitch;\n    }\n    if (v.padding && !tr.isPaddingEqual(v.padding)) {\n        changed = true;\n        tr.padding = v.padding;\n    }\n    return changed;\n}\n//# sourceMappingURL=transform.js.map"]},"metadata":{},"sourceType":"module"}